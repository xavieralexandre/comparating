{"version":3,"file":"/packages/ctl.js","sources":["ctl/ctl.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,mB;AACA,e;AACA,yB;AACA,oC;AACA,kB;AACA,oC;AACA,qB;;AAEA,oC;AACA,G;AACA,G;;AAEA,0C;AACA,6B;AACA,gC;AACA,4E;AACA,sC;AACA,6D;AACA,2C;AACA,Q;AACA,oB;AACA,K;AACA,gB;AACA,E;;;AAGA,mB;AACA,gB;AACA,yB;AACA,yB;AACA,2C;AACA,2B;AACA,sB;AACA,O;AACA,wE;AACA,Y;AACA,E;AACA,sB;AACA,K;;AAEA,sC;AACA,iE;AACA,2B;AACA,qC;AACA,oE;;AAEA,sB;AACA,8B;AACA,4B;AACA,+C;AACA,uB;AACA,4B;AACA,6B;AACA,gC;AACA,wC;AACA,U;AACA,c;AACA,uB;AACA,sC;AACA,U;AACA,O;;AAEA,0B;AACA,e;AACA,iB;AACA,iC;AACA,W;AACA,U;AACA,mB;AACA,6B;AACA,oC;AACA,Y;AACA,oB;AACA,mC;AACA,W;AACA,U;AACA,+D;AACA,Q;;AAEA,8E;AACA,sB;AACA,iC;AACA,0E;;AAEA,uB;AACA,2E;AACA,8B;AACA,c;AACA,6D;AACA,qE;AACA,oD;AACA,U;AACA,gB;AACA,mB;AACA,4B;AACA,6B;AACA,W;AACA,U;AACA,wB;AACA,U;AACA,uC;AACA,Y;AACA,6C;AACA,K;AACA,G;AACA,G;;AAEA,mB;AACA,e;AACA,wB;AACA,yB;AACA,2C;AACA,2B;AACA,qB;AACA,O;AACA,oE;AACA,sB;AACA,E;AACA,sB;AACA,K;;AAEA,6E;AACA,sB;AACA,gC;AACA,iE;AACA,iC;AACA,8B;AACA,oC;AACA,e;AACA,wB;AACA,mB;AACA,e;AACA,qC;AACA,O;AACA,mC;AACA,G;AACA,G;;;AAGA,mB;AACA,gB;AACA,qB;AACA,yB;AACA,wE;AACA,2B;AACA,wC;AACA,O;AACA,8E;AACA,kB;AACA,E;AACA,sB;AACA,K;;AAEA,+C;AACA,wC;AACA,e;AACA,uE;AACA,wB;AACA,O;AACA,oD;AACA,O;;AAEA,iC;AACA,kC;AACA,4D;AACA,mC;AACA,kB;AACA,6E;AACA,c;AACA,0B;AACA,uC;AACA,S;AACA,S;AACA,+C;AACA,uB;AACA,e;AACA,iE;AACA,oC;AACA,yB;AACA,8E;AACA,+B;AACA,Y;AACA,S;AACA,O;AACA,G;AACA,G;;AAEA,wB;AACA,wB;AACA,E","sourcesContent":["Ctl.Commands.push({\n  name: \"help\",\n  func: function (argv) {\n    if (!argv._.length || argv.help)\n      Ctl.usage();\n    var cmd = argv._.splice(0,1)[0];\n    argv.help = true;\n\n    Ctl.findCommand(cmd).func(argv);\n  }\n});\n\nvar mergeObjects = function (obj1, obj2) {\n  var result = _.clone(obj1);\n  _.each(obj2, function (v, k) {\n    // If both objects have an object at this key, then merge those objects.\n    // Otherwise, choose obj2's value.\n    if ((v instanceof Object) && (obj1[k] instanceof Object))\n      result[k] = mergeObjects(v, obj1[k]);\n    else\n      result[k] = v;\n  });\n  return result;\n};\n\n\nCtl.Commands.push({\n  name: \"start\",\n  help: \"Start this app\",\n  func: function (argv) {\n    if (argv.help || argv._.length !== 0) {\n      process.stderr.write(\n\"Usage: ctl start\\n\" +\n \"\\n\" +\n\"Starts the app. For now, this just means that it runs the 'server'\\n\" +\n\"program.\\n\"\n);\n      process.exit(1);\n    }\n\n    var numServers = Ctl.getJobsByApp(\n      Ctl.myAppName(), {program: 'server', done: false}).count();\n    if (numServers === 0) {\n      var appConfig = Ctl.prettyCall(\n        Ctl.findGalaxy(), 'getAppConfiguration', [Ctl.myAppName()]);\n\n      var proxyConfig;\n      var bindPathPrefix = \"\";\n      if (appConfig.admin) {\n        bindPathPrefix = \"/\" + Ctl.myAppName();\n        proxyConfig = {\n          securePort: 44333,\n          insecurePort: 9414,\n          bindHost: \"localhost\",\n          bindPathPrefix: bindPathPrefix\n        };\n      } else {\n        proxyConfig = {\n          bindHost: appConfig.sitename\n        };\n      }\n\n      var deployConfig = {\n        boot: {\n          bind: {\n            viaProxy: proxyConfig\n          }\n        },\n        packages: {\n          \"mongo-livedata\": {\n            url: appConfig.MONGO_URL\n          },\n          \"email\": {\n            url: appConfig.MAIL_URL\n          }\n        },\n        proxyServiceName: appConfig.proxyServiceName || \"proxy\"\n      };\n\n      // Merge in any values that might have been added to the app's config in\n      // the database.\n      if (appConfig.deployConfig)\n        deployConfig = mergeObjects(deployConfig, appConfig.deployConfig);\n\n      // XXX args? env?\n      Ctl.prettyCall(Ctl.findGalaxy(), 'run', [Ctl.myAppName(), 'server', {\n        exitPolicy: 'restart',\n        env: {\n          METEOR_DEPLOY_CONFIG: JSON.stringify(deployConfig),\n          ROOT_URL: \"https://\" + appConfig.sitename + bindPathPrefix,\n          METEOR_SETTINGS: appConfig.METEOR_SETTINGS\n        },\n        ports: {\n          \"main\": {\n            bindEnv: \"PORT\",\n            routeEnv: \"ROUTE\"\n          }\n        },\n        tags: [\"runner\"]\n      }]);\n      console.log(\"Started a server.\");\n    } else {\n      console.log(\"Server already running.\");\n    }\n  }\n});\n\nCtl.Commands.push({\n  name: \"stop\",\n  help: \"Stop this app\",\n  func: function (argv) {\n    if (argv.help || argv._.length !== 0) {\n      process.stderr.write(\n\"Usage: ctl stop\\n\" +\n \"\\n\" +\n\"Stops the app. For now, this just means that it kills all jobs\\n\" +\n\"other than itself.\\n\"\n);\n      process.exit(1);\n    }\n\n    // Get all jobs (other than this job: don't commit suicide!) that are not\n    // already killed.\n    var jobs = Ctl.getJobsByApp(\n      Ctl.myAppName(), {_id: {$ne: Ctl.myJobId()}, done: false});\n    jobs.forEach(function (job) {\n      // Don't commit suicide.\n      if (job._id === Ctl.myJobId())\n        return;\n      // It's dead, Jim.\n      if (job.done)\n        return;\n      Ctl.kill(job.program, job._id);\n    });\n    console.log(\"Server stopped.\");\n  }\n});\n\n\nCtl.Commands.push({\n  name: \"scale\",\n  help: \"Scale jobs\",\n  func: function (argv) {\n    if (argv.help || argv._.length === 0 || _.contains(argv._, 'ctl')) {\n      process.stderr.write(\n\"Usage: ctl scale program1=n [...] \\n\" +\n \"\\n\" +\n\"Scales some programs. Runs or kills jobs until there are n non-done jobs\\n\" +\n\"in that state.\\n\"\n);\n      process.exit(1);\n    }\n\n    var scales = _.map(argv._, function (arg) {\n      var m = arg.match(/^(.+)=(\\d+)$/);\n      if (!m) {\n        console.log(\"Bad scaling argument; should be program=number.\");\n        process.exit(1);\n      }\n      return {program: m[1], scale: parseInt(m[2])};\n    });\n\n    _.each(scales, function (s) {\n      var jobs = Ctl.getJobsByApp(\n        Ctl.myAppName(), {program: s.program, done: false});\n      jobs.forEach(function (job) {\n        --s.scale;\n        // Is this an extraneous job, more than the number that we need? Kill\n        // it!\n        if (s.scale < 0) {\n          Ctl.kill(s.program, job._id);\n        }\n      });\n      // Now start any jobs that are necessary.\n      if (s.scale <= 0)\n        return;\n      console.log(\"Starting %d jobs for %s\", s.scale, s.program);\n      _.times(s.scale, function () {\n        // XXX args? env?\n        Ctl.prettyCall(Ctl.findGalaxy(), 'run', [Ctl.myAppName(), s.program, {\n          exitPolicy: 'restart'\n        }]);\n      });\n    });\n  }\n});\n\nmain = function (argv) {\n  return Ctl.main(argv);\n};\n"]}