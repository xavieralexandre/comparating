{"version":3,"file":"/packages/random.js","sources":["random/random.js","random/deprecated.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,qE;AACA,iD;AACA,wB;AACA,mB;AACA,uB;;AAEA,+B;AACA,6B;AACA,6C;AACA,gC;AACA,wC;AACA,oB;AACA,e;AACA,e;AACA,oB;AACA,e;AACA,qC;AACA,O;AACA,yD;AACA,M;;AAEA,8B;AACA,gB;AACA,G;;AAEA,2B;AACA,e;AACA,e;AACA,e;AACA,c;;AAEA,2B;AACA,yB;AACA,K;AACA,sB;AACA,mB;AACA,mB;AACA,mB;;AAEA,2C;AACA,0B;AACA,mB;AACA,gB;AACA,O;AACA,0B;AACA,mB;AACA,gB;AACA,O;AACA,0B;AACA,mB;AACA,gB;AACA,O;AACA,K;AACA,gB;;AAEA,6B;AACA,iE;AACA,c;AACA,c;AACA,kC;AACA,M;AACA,gC;AACA,4C;AACA,M;AACA,iC;AACA,uB;AACA,oE;AACA,M;AACA,gC;AACA,uB;AACA,kB;;AAEA,6C;AACA,E;;AAEA,mF;;AAEA,yC;;AAEA,2C;;AAEA,gB;;AAEA,4B;AACA,4B;AACA,I;;AAEA,yB;AACA,gB;;AAEA,mB;;AAEA,qB;;AAEA,2C;AACA,qE;AACA,4C;AACA,8C;AACA,U;AACA,oC;AACA,O;;AAEA,yB;AACA,sB;AACA,uE;AACA,oC;AACA,oC;AACA,oD;AACA,O;AACA,6B;AACA,O;;AAEA,uC;AACA,yB;AACA,wC;AACA,wD;AACA,O;AACA,gC;AACA,M;AACA,K;AACA,E;;AAEA,uE;;AAEA,iB;AACA,qE;AACA,sC;AACA,kC;AACA,mD;AACA,sC;AACA,uB;AACA,wC;AACA,Q;;AAEA,mE;AACA,sC;AACA,kC;AACA,kD;AACA,sC;AACA,uB;AACA,uC;AACA,Q;;AAEA,4E;;AAEA,iB;AACA,+D;;AAEA,2E;AACA,8E;AACA,gF;AACA,iB;AACA,sD;AACA,G;;;;;;;;;;;;;;;;;;;ACzJA,iE;AACA,gE;AACA,oB;AACA,wB;AACA,2B;AACA,sC;AACA,a;AACA,gC;AACA,qC;AACA,G;AACA,c;AACA,iE;AACA,qC;;AAEA,wB;AACA,c;AACA,E","sourcesContent":["// see http://baagoe.org/en/wiki/Better_random_numbers_for_javascript\n// for a full discussion and Alea implementation.\nvar Alea = function () {\n  function Mash() {\n    var n = 0xefc8249d;\n\n    var mash = function(data) {\n      data = data.toString();\n      for (var i = 0; i < data.length; i++) {\n        n += data.charCodeAt(i);\n        var h = 0.02519603282416938 * n;\n        n = h >>> 0;\n        h -= n;\n        h *= n;\n        n = h >>> 0;\n        h -= n;\n        n += h * 0x100000000; // 2^32\n      }\n      return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n    };\n\n    mash.version = 'Mash 0.9';\n    return mash;\n  }\n\n  return (function (args) {\n    var s0 = 0;\n    var s1 = 0;\n    var s2 = 0;\n    var c = 1;\n\n    if (args.length == 0) {\n      args = [+new Date];\n    }\n    var mash = Mash();\n    s0 = mash(' ');\n    s1 = mash(' ');\n    s2 = mash(' ');\n\n    for (var i = 0; i < args.length; i++) {\n      s0 -= mash(args[i]);\n      if (s0 < 0) {\n        s0 += 1;\n      }\n      s1 -= mash(args[i]);\n      if (s1 < 0) {\n        s1 += 1;\n      }\n      s2 -= mash(args[i]);\n      if (s2 < 0) {\n        s2 += 1;\n      }\n    }\n    mash = null;\n\n    var random = function() {\n      var t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32\n      s0 = s1;\n      s1 = s2;\n      return s2 = t - (c = t | 0);\n    };\n    random.uint32 = function() {\n      return random() * 0x100000000; // 2^32\n    };\n    random.fract53 = function() {\n      return random() +\n        (random() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53\n    };\n    random.version = 'Alea 0.9';\n    random.args = args;\n    return random;\n\n  } (Array.prototype.slice.call(arguments)));\n};\n\nvar UNMISTAKABLE_CHARS = \"23456789ABCDEFGHJKLMNPQRSTWXYZabcdefghijkmnopqrstuvwxyz\";\n\nvar create = function (/* arguments */) {\n\n  var random = Alea.apply(null, arguments);\n\n  var self = {};\n\n  var bind = function (fn) {\n    return _.bind(fn, self);\n  };\n\n  return _.extend(self, {\n    _Alea: Alea,\n\n    create: create,\n\n    fraction: random,\n\n    choice: bind(function (arrayOrString) {\n      var index = Math.floor(this.fraction() * arrayOrString.length);\n      if (typeof arrayOrString === \"string\")\n        return arrayOrString.substr(index, 1);\n      else\n        return arrayOrString[index];\n    }),\n\n    id: bind(function() {\n      var digits = [];\n      // Length of 17 preserves around 96 bits of entropy, which is the\n      // amount of state in our PRNG\n      for (var i = 0; i < 17; i++) {\n        digits[i] = this.choice(UNMISTAKABLE_CHARS);\n      }\n      return digits.join(\"\");\n    }),\n\n    hexString: bind(function (digits) {\n      var hexDigits = [];\n      for (var i = 0; i < digits; ++i) {\n        hexDigits.push(this.choice(\"0123456789abcdef\"));\n      }\n      return hexDigits.join('');\n    })\n  });\n};\n\n// instantiate RNG.  Heuristically collect entropy from various sources\n\n// client sources\nvar height = (typeof window !== 'undefined' && window.innerHeight) ||\n      (typeof document !== 'undefined'\n       && document.documentElement\n       && document.documentElement.clientHeight) ||\n      (typeof document !== 'undefined'\n       && document.body\n       && document.body.clientHeight) ||\n      1;\n\nvar width = (typeof window !== 'undefined' && window.innerWidth) ||\n      (typeof document !== 'undefined'\n       && document.documentElement\n       && document.documentElement.clientWidth) ||\n      (typeof document !== 'undefined'\n       && document.body\n       && document.body.clientWidth) ||\n      1;\n\nvar agent = (typeof navigator !== 'undefined' && navigator.userAgent) || \"\";\n\n// server sources\nvar pid = (typeof process !== 'undefined' && process.pid) || 1;\n\n// XXX On the server, use the crypto module (OpenSSL) instead of this PRNG.\n//     (Make Random.fraction be generated from Random.hexString instead of the\n//     other way around, and generate Random.hexString from crypto.randomBytes.)\nRandom = create([\n  new Date(), height, width, agent, pid, Math.random()\n]);\n","// Before this package existed, we used to use this Meteor.uuid()\n// implementing the RFC 4122 v4 UUID. It is no longer documented\n// and will go away.\n// XXX COMPAT WITH 0.5.6\nMeteor.uuid = function () {\n  var HEX_DIGITS = \"0123456789abcdef\";\n  var s = [];\n  for (var i = 0; i < 36; i++) {\n    s[i] = Random.choice(HEX_DIGITS);\n  }\n  s[14] = \"4\";\n  s[19] = HEX_DIGITS.substr((parseInt(s[19],16) & 0x3) | 0x8, 1);\n  s[8] = s[13] = s[18] = s[23] = \"-\";\n\n  var uuid = s.join(\"\");\n  return uuid;\n};\n"]}