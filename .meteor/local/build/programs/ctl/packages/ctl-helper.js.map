{"version":3,"file":"/packages/ctl-helper.js","sources":["ctl-helper/ctl-helper.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,uC;AACA,0C;;AAEA,S;;AAEA,e;AACA,e;;AAEA,yB;AACA,4B;AACA,6B;AACA,2B;AACA,oB;;AAEA,oB;AACA,kC;AACA,uB;AACA,K;;AAEA,yB;AACA,sB;AACA,sC;;AAEA,wC;AACA,a;AACA,I;;AAEA,gC;AACA,uD;AACA,gB;AACA,4E;AACA,sB;AACA,K;;AAEA,e;AACA,I;;AAEA,kC;AACA,qC;AACA,kB;AACA,yE;AACA,sB;AACA,K;;AAEA,8C;AACA,K;;AAEA,sC;AACA,sE;AACA,K;;AAEA,4D;AACA,oD;AACA,+D;AACA,K;;AAEA,6B;AACA,oD;AACA,kC;AACA,oC;AACA,kC;AACA,uB;AACA,yC;AACA,+C;AACA,I;;AAEA,iC;AACA,yC;AACA,kE;AACA,sB;AACA,K;AACA,kC;AACA,K;;AAEA,+B;AACA,yC;AACA,kE;AACA,sB;AACA,K;AACA,kC;AACA,K;;AAEA,qB;AACA,yB;AACA,kD;AACA,c;AACA,qF;AACA,oF;AACA,sD;AACA,c;AACA,uB;AACA,yC;AACA,qC;AACA,yE;AACA,6D;AACA,O;AACA,O;AACA,+B;AACA,yB;AACA,8D;AACA,oB;AACA,I;;AAEA,gD;AACA,6C;AACA,8B;;AAEA,0C;AACA,iC;;AAEA,oC;AACA,Y;AACA,uC;AACA,2C;AACA,8D;;AAEA,oB;AACA,I;;AAEA,gD;AACA,uD;AACA,S;AACA,yC;AACA,iB;AACA,qC;AACA,K;AACA,e;AACA,I;;AAEA,uC;AACA,qD;AACA,oD;AACA,G;AACA,G","sourcesContent":["var optimist = Npm.require('optimist');\nvar Future = Npm.require('fibers/future');\n\nCtl = {};\n\n_.extend(Ctl, {\n  Commands: [],\n\n  main: function (argv) {\n    var opt = optimist(argv)\n          .alias('h', 'help')\n          .boolean('help');\n    argv = opt.argv;\n\n    if (argv.help) {\n      argv._.splice(0, 0, \"help\");\n      delete argv.help;\n    }\n\n    var cmdName = 'help';\n    if (argv._.length)\n      cmdName = argv._.splice(0,1)[0];\n\n    Ctl.findCommand(cmdName).func(argv);\n    return 0;\n  },\n\n  findCommand: function (name) {\n    var cmd = _.where(Ctl.Commands, { name: name })[0];\n    if (! cmd) {\n      console.log(\"'\" + name + \"' is not a ctl command. See 'ctl --help'.\");\n      process.exit(1);\n    }\n\n    return cmd;\n  },\n\n  findGalaxy: _.once(function () {\n    if (!('GALAXY' in process.env)) {\n      console.log(\n        \"GALAXY environment variable must be set. See 'galaxy --help'.\");\n      process.exit(1);\n    }\n\n    return DDP.connect(process.env['GALAXY']);\n  }),\n\n  jobsCollection: _.once(function () {\n    return new Meteor.Collection(\"jobs\", {manager: Ctl.findGalaxy()});\n  }),\n\n  // use _.memoize so that this is called only once per app.\n  subscribeToAppJobs: _.memoize(function (appName) {\n    Ctl.findGalaxy()._subscribeAndWait(\"jobsByApp\", [appName]);\n  }),\n\n  // XXX this never unsubs...\n  getJobsByApp: function (appName, restOfSelector) {\n    var galaxy = Ctl.findGalaxy();\n    Ctl.subscribeToAppJobs(appName);\n    var selector = {app: appName};\n    if (restOfSelector)\n      _.extend(selector, restOfSelector);\n    return Ctl.jobsCollection().find(selector);\n  },\n\n  myAppName: _.once(function () {\n    if (!('GALAXY_APP' in process.env)) {\n      console.log(\"GALAXY_APP environment variable must be set.\");\n      process.exit(1);\n    }\n    return process.env.GALAXY_APP;\n  }),\n\n  myJobId: _.once(function () {\n    if (!('GALAXY_JOB' in process.env)) {\n      console.log(\"GALAXY_JOB environment variable must be set.\");\n      process.exit(1);\n    }\n    return process.env.GALAXY_JOB;\n  }),\n\n  usage: function() {\n    process.stdout.write(\n      \"Usage: ctl [--help] <command> [<args>]\\n\" +\n        \"\\n\" +\n        \"For now, the GALAXY environment variable must be set to the location of\\n\" +\n        \"your Galaxy management server (Ultraworld.) This string is in the same\\n\" +\n        \"format as the argument to DDP.connect().\\n\" +\n        \"\\n\" +\n        \"Commands:\\n\");\n    _.each(Ctl.Commands, function (cmd) {\n      if (cmd.help && ! cmd.hidden) {\n        var name = cmd.name + \"                \".substr(cmd.name.length);\n        process.stdout.write(\"   \" + name + cmd.help + \"\\n\");\n      }\n    });\n    process.stdout.write(\"\\n\");\n    process.stdout.write(\n      \"See 'ctl help <command>' for details on a command.\\n\");\n    process.exit(1);\n  },\n\n  // XXX copied to meteor/tools/deploy-galaxy.js\n  exitWithError: function (error, messages) {\n    messages = messages || {};\n\n    if (! (error instanceof Meteor.Error))\n      throw error; // get a stack\n\n    var msg = messages[error.error];\n    if (msg)\n      process.stderr.write(msg + \"\\n\");\n    else if (error instanceof Meteor.Error)\n      process.stderr.write(\"Denied: \" + error.message + \"\\n\");\n\n    process.exit(1);\n  },\n\n  // XXX copied to meteor/tools/deploy-galaxy.js\n  prettyCall: function (galaxy, name, args, messages) {\n    try {\n      var ret = galaxy.apply(name, args);\n    } catch (e) {\n      Ctl.exitWithError(e, messages);\n    }\n    return ret;\n  },\n\n  kill: function (programName, jobId) {\n  console.log(\"Killing %s (%s)\", programName, jobId);\n  Ctl.prettyCall(Ctl.findGalaxy(), 'kill', [jobId]);\n  }\n});\n"]}