{"version":3,"file":"/packages/mongo-livedata.js","sources":["mongo-livedata/mongo_driver.js","mongo-livedata/local_collection_driver.js","mongo-livedata/remote_collection_driver.js","mongo-livedata/collection.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,G;AACA,+D;AACA,qE;AACA,qB;AACA,E;AACA,uE;AACA,8C;AACA,G;;AAEA,+B;AACA,qC;AACA,kC;AACA,wD;;AAEA,oB;;AAEA,6C;AACA,kC;AACA,2B;AACA,8D;AACA,K;AACA,iB;AACA,yC;AACA,qD;AACA,O;AACA,e;AACA,G;AACA,e;AACA,E;;AAEA,gE;AACA,kE;;AAEA,sD;AACA,2C;AACA,sC;AACA,kC;AACA,G;AACA,6C;AACA,kE;AACA,G;AACA,0D;AACA,yE;AACA,G;AACA,mB;AACA,E;;AAEA,sD;AACA,iC;AACA,qE;AACA,+E;AACA,+B;AACA,oD;AACA,G;AACA,uD;AACA,wD;AACA,6C;AACA,qE;AACA,G;AACA,uE;AACA,4E;AACA,mB;AACA,E;;AAEA,yD;AACA,wD;AACA,oB;;AAEA,uD;AACA,yC;AACA,gC;;AAEA,qB;AACA,wC;AACA,yD;AACA,8B;AACA,kC;AACA,2B;AACA,gC;AACA,6B;AACA,K;AACA,K;AACA,a;AACA,E;;;AAGA,kC;AACA,kB;AACA,8B;AACA,6B;;AAEA,mC;;AAEA,qE;AACA,uE;AACA,sD;AACA,gD;AACA,4C;AACA,G;;AAEA,sE;AACA,sB;AACA,iE;AACA,oE;AACA,iB;AACA,wE;AACA,2C;AACA,kE;AACA,+C;AACA,qC;AACA,G;;AAEA,mD;AACA,Y;AACA,gB;AACA,iB;;AAEA,uB;AACA,yC;AACA,mD;AACA,c;AACA,S;AACA,a;AACA,K;AACA,E;;AAEA,8C;AACA,kB;AACA,+D;AACA,8D;AACA,2B;AACA,2D;AACA,E;;AAEA,yD;AACA,kB;AACA,gB;AACA,sB;AACA,U;AACA,0C;AACA,G;AACA,E;;AAEA,kD;AACA,sE;AACA,kB;;AAEA,0B;AACA,8B;AACA,qD;AACA,K;AACA,uB;AACA,E;;AAEA,6E;AACA,yE;AACA,kB;AACA,4B;AACA,8B;AACA,uE;AACA,2C;AACA,K;AACA,gB;AACA,E;;AAEA,gE;AACA,oE;AACA,kE;AACA,kE;AACA,gE;AACA,0D;AACA,kB;AACA,iD;AACA,Y;AACA,8B;AACA,M;AACA,uC;AACA,E;;AAEA,kC;;AAEA,6E;AACA,8E;AACA,+E;AACA,4E;AACA,wB;AACA,E;AACA,oE;AACA,sE;AACA,mE;AACA,yE;AACA,4D;AACA,E;AACA,8D;AACA,mE;AACA,6D;;AAEA,yD;AACA,wD;AACA,gB;AACA,uD;AACA,gB;AACA,K;AACA,sB;AACA,iB;AACA,4B;AACA,iB;AACA,gB;AACA,qB;AACA,sD;AACA,K;AACA,E;;AAEA,wE;AACA,yD;AACA,kB;AACA,gE;AACA,sC;AACA,sB;AACA,iB;AACA,yB;AACA,Q;AACA,c;AACA,G;;AAEA,sC;AACA,6B;AACA,sE;AACA,I;AACA,qD;AACA,O;AACA,0D;AACA,yE;AACA,8C;AACA,e;AACA,sB;AACA,Y;AACA,G;AACA,E;;AAEA,2E;AACA,S;AACA,0E;AACA,kB;AACA,gD;AACA,2E;AACA,+E;AACA,8E;AACA,W;AACA,oE;AACA,oB;AACA,uC;AACA,qD;AACA,O;AACA,U;AACA,+B;AACA,G;AACA,E;;AAEA,wE;AACA,yD;AACA,kB;;AAEA,gE;AACA,sC;AACA,sB;AACA,iB;AACA,yB;AACA,Q;AACA,c;AACA,G;;AAEA,sC;AACA,6B;AACA,6C;AACA,I;AACA,qD;;AAEA,O;AACA,0D;AACA,yE;AACA,8C;AACA,e;AACA,sB;AACA,Y;AACA,G;AACA,E;;AAEA,6E;AACA,kE;AACA,kB;;AAEA,kD;AACA,uB;AACA,mB;AACA,G;;AAEA,gE;AACA,sC;AACA,sB;AACA,iB;AACA,yB;AACA,Q;AACA,c;AACA,G;;AAEA,kE;AACA,gE;AACA,+D;AACA,uE;AACA,gB;AACA,sC;AACA,qE;;AAEA,6B;;AAEA,sC;AACA,6B;AACA,6C;AACA,I;AACA,qD;AACA,O;AACA,0D;AACA,iC;AACA,0D;AACA,gD;AACA,8C;AACA,yE;AACA,oE;AACA,2C;AACA,e;AACA,sB;AACA,Y;AACA,G;AACA,E;;AAEA,0D;AACA,kE;AACA,oB;AACA,wE;AACA,I;AACA,G;;AAEA,+E;AACA,kB;;AAEA,6B;AACA,kB;;AAEA,oB;AACA,oE;AACA,E;;AAEA,wE;AACA,wD;AACA,kB;AACA,6B;AACA,kB;;AAEA,0B;AACA,oB;AACA,kE;AACA,E;;AAEA,6E;AACA,oC;AACA,yE;AACA,6D;AACA,kB;AACA,4C;;AAEA,+E;AACA,+C;AACA,uD;AACA,0B;AACA,4E;AACA,gB;AACA,E;AACA,yE;AACA,kB;;AAEA,8E;AACA,mC;AACA,uD;AACA,0B;AACA,iE;AACA,gB;AACA,E;;AAEA,U;;AAEA,qD;AACA,E;AACA,yE;AACA,6E;AACA,6E;AACA,4E;AACA,mD;AACA,E;AACA,yD;AACA,6D;AACA,E;AACA,yE;AACA,+E;AACA,8E;AACA,gC;AACA,E;AACA,+E;AACA,iC;AACA,E;AACA,6E;AACA,yE;AACA,uE;AACA,c;;;AAGA,sE;AACA,kB;AACA,uC;AACA,+D;AACA,+B;AACA,E;;AAEA,kD;AACA,kB;;AAEA,sB;AACA,8C;AACA,iC;AACA,E;;AAEA,0E;AACA,0C;AACA,oB;;AAEA,8C;AACA,iD;AACA,yE;;AAEA,iC;AACA,qE;AACA,uC;;AAEA,iD;AACA,0C;AACA,I;AACA,G;;AAEA,6C;AACA,kB;AACA,mD;AACA,E;;AAEA,gF;AACA,+E;AACA,a;;AAEA,kD;AACA,kB;AACA,0D;AACA,iE;AACA,E;;AAEA,yE;AACA,wE;AACA,+C;AACA,mD;AACA,kB;AACA,gD;AACA,C;;AAEA,iD;AACA,kB;AACA,qE;AACA,E;;AAEA,wD;AACA,kB;AACA,6D;AACA,qC;AACA,iD;AACA,E;;AAEA,gF;AACA,6E;AACA,kB;;AAEA,yE;AACA,0C;AACA,sB;AACA,uB;AACA,yB;AACA,sB;AACA,I;;AAEA,2E;AACA,yB;AACA,mC;AACA,iC;AACA,8E;AACA,+D;AACA,kC;AACA,gF;AACA,+B;AACA,sC;AACA,G;;AAEA,iC;AACA,yE;AACA,kC;;AAEA,0E;AACA,E;;AAEA,8E;AACA,kB;AACA,4B;AACA,8C;AACA,4D;AACA,4C;AACA,yC;AACA,M;AACA,U;AACA,2B;AACA,G;;AAEA,2E;AACA,wE;AACA,kE;AACA,4C;AACA,2C;AACA,sE;AACA,wB;AACA,E;;AAEA,uC;AACA,4B;AACA,oB;AACA,kB;AACA,qD;AACA,wC;AACA,0D;;AAEA,sD;AACA,2E;AACA,gF;AACA,+E;AACA,yD;AACA,0D;AACA,8C;AACA,uC;AACA,O;;AAEA,0B;AACA,mC;;AAEA,iB;AACA,K;AACA,I;;AAEA,qC;AACA,sE;AACA,gC;AACA,oB;;AAEA,0E;AACA,8E;AACA,2D;AACA,kB;AACA,mC;AACA,uB;AACA,oB;AACA,K;AACA,I;;AAEA,iC;AACA,sE;AACA,kE;AACA,4B;AACA,oB;AACA,iB;AACA,iC;AACA,8B;AACA,O;AACA,e;AACA,I;;AAEA,uB;AACA,oB;;AAEA,8B;AACA,4B;;AAEA,0B;AACA,I;;AAEA,wC;AACA,sB;AACA,oB;;AAEA,2B;AACA,I;;AAEA,sB;AACA,oB;AACA,gC;AACA,I;;AAEA,sB;AACA,oB;AACA,2C;AACA,I;;AAEA,0C;AACA,qC;AACA,oB;AACA,kB;AACA,0B;AACA,Y;AACA,uB;AACA,mC;AACA,+B;AACA,S;AACA,qB;AACA,K;AACA,G;AACA,G;;AAEA,4B;AACA,0D;AACA,kB;AACA,wC;AACA,gC;AACA,4C;AACA,oC;AACA,oC;AACA,gC;AACA,4C;AACA,gD;AACA,E;AACA,4C;AACA,kB;AACA,kD;AACA,8B;AACA,E;;AAEA,sD;AACA,4C;AACA,kB;;AAEA,2C;AACA,+E;AACA,G;;AAEA,kC;AACA,qD;;AAEA,qB;AACA,oB;AACA,2B;;AAEA,4E;AACA,6E;AACA,2E;AACA,uC;AACA,mD;AACA,yD;AACA,Y;AACA,4E;AACA,oB;AACA,0C;AACA,0B;AACA,a;AACA,gB;AACA,qB;AACA,mD;AACA,U;AACA,yC;AACA,yD;AACA,0B;AACA,K;AACA,iE;AACA,K;;AAEA,qB;AACA,8E;AACA,sD;AACA,yD;AACA,U;AACA,2E;AACA,gF;AACA,+E;AACA,4B;AACA,sE;AACA,G;;AAEA,uB;AACA,E;;AAEA,uE;AACA,oE;AACA,kB;;AAEA,8C;AACA,kC;AACA,0B;AACA,uC;;AAEA,gF;AACA,4B;AACA,iC;;AAEA,kE;AACA,kC;AACA,oC;;AAEA,+E;AACA,gF;AACA,6E;AACA,+E;AACA,0E;AACA,+E;AACA,iD;AACA,wC;AACA,8E;AACA,8E;AACA,yB;AACA,mD;AACA,sE;;AAEA,gF;AACA,Y;AACA,2C;AACA,yD;;AAEA,mD;;AAEA,0E;AACA,gF;AACA,4E;AACA,4C;AACA,0D;AACA,kD;AACA,gF;AACA,gF;AACA,qE;AACA,uD;AACA,kB;AACA,uD;AACA,4E;AACA,+E;AACA,wD;AACA,oD;AACA,wC;AACA,mB;AACA,S;AACA,+D;AACA,I;AACA,2D;AACA,0D;AACA,gC;AACA,oB;AACA,uC;AACA,+C;AACA,O;AACA,U;AACA,yB;AACA,G;;AAEA,yC;AACA,4B;;AAEA,iC;AACA,sD;AACA,sB;AACA,gC;AACA,sC;AACA,sC;AACA,G;AACA,6C;AACA,wC;AACA,uD;AACA,sC;AACA,oE;AACA,wE;AACA,2E;AACA,2E;AACA,+E;AACA,yB;AACA,gE;AACA,oD;AACA,6C;AACA,gE;AACA,S;AACA,M;AACA,K;;AAEA,yE;AACA,sE;AACA,c;AACA,I;AACA,6E;AACA,+E;AACA,U;AACA,6B;AACA,sD;AACA,U;AACA,4C;AACA,4D;AACA,0C;AACA,2C;AACA,O;AACA,G;AACA,E;;AAEA,oC;AACA,6C;AACA,oB;AACA,0C;AACA,uD;AACA,mC;AACA,qE;;AAEA,2D;;AAEA,2E;AACA,4B;AACA,wC;AACA,yC;AACA,wB;AACA,O;AACA,I;;AAEA,8C;AACA,kD;AACA,oB;AACA,8C;AACA,a;AACA,wC;AACA,2C;AACA,wB;AACA,O;AACA,I;;AAEA,iD;AACA,I;AACA,+E;AACA,oE;AACA,2E;AACA,a;AACA,I;AACA,yE;AACA,+B;AACA,oB;AACA,sE;AACA,4D;AACA,wC;AACA,yE;AACA,2C;;AAEA,8E;AACA,uB;AACA,gD;AACA,0D;AACA,yD;AACA,I;AACA,8B;AACA,oB;AACA,uE;AACA,gD;AACA,0D;AACA,yD;AACA,0D;AACA,4D;AACA,yC;AACA,wB;AACA,O;AACA,I;;AAEA,2B;AACA,oB;AACA,wC;;AAEA,+D;;AAEA,oE;AACA,6C;AACA,6B;;AAEA,0D;AACA,kC;AACA,uC;AACA,Y;AACA,2E;AACA,4D;AACA,K;AACA,0E;AACA,mC;;AAEA,uC;AACA,2C;AACA,wC;AACA,0E;AACA,K;;AAEA,wC;AACA,+B;;AAEA,gF;AACA,wE;AACA,kC;AACA,0D;AACA,I;;AAEA,oE;AACA,8E;AACA,gE;AACA,0D;AACA,oB;;AAEA,2E;AACA,oE;AACA,yE;AACA,yC;AACA,sB;AACA,2E;;AAEA,sE;AACA,qD;AACA,mD;;AAEA,yC;AACA,gC;AACA,8E;;AAEA,+D;AACA,uD;AACA,6D;AACA,qD;;AAEA,2B;AACA,iD;AACA,iD;AACA,wC;AACA,4B;AACA,8B;AACA,4D;AACA,8E;AACA,kB;AACA,2C;AACA,W;AACA,W;AACA,O;AACA,O;AACA,I;;AAEA,8E;AACA,wE;AACA,I;AACA,8E;AACA,4D;AACA,2C;AACA,oB;;AAEA,8D;AACA,8E;AACA,yD;;AAEA,0C;AACA,6D;AACA,6E;AACA,sE;AACA,gC;AACA,qD;AACA,yD;AACA,4E;AACA,e;AACA,kC;AACA,K;AACA,G;AACA,G;;AAEA,6D;AACA,E;AACA,wC;AACA,8E;AACA,gF;AACA,U;AACA,8E;AACA,2E;AACA,kE;AACA,2E;AACA,yE;AACA,gF;AACA,4E;AACA,iD;AACA,yE;AACA,6E;AACA,wD;AACA,yC;AACA,gF;AACA,4E;AACA,8E;AACA,+E;AACA,gF;AACA,uE;AACA,2E;AACA,0E;AACA,8E;AACA,4B;AACA,8D;AACA,4C;AACA,kB;;AAEA,4E;AACA,sC;AACA,4C;AACA,uC;AACA,6E;AACA,mD;AACA,yE;AACA,G;AACA,+D;AACA,sE;;AAEA,sB;AACA,yB;AACA,4B;AACA,kB;AACA,kB;AACA,e;AACA,W;AACA,uC;AACA,qB;AACA,+E;AACA,8E;AACA,4D;AACA,mB;AACA,O;AACA,kB;AACA,e;AACA,gB;AACA,yB;AACA,uB;AACA,6E;AACA,4E;AACA,+E;AACA,4E;AACA,kB;AACA,wB;AACA,sB;AACA,sB;AACA,+C;AACA,gB;AACA,mC;AACA,S;AACA,c;AACA,8D;AACA,qB;AACA,yC;AACA,S;AACA,oC;AACA,qE;AACA,2C;AACA,sB;AACA,gE;AACA,O;AACA,K;AACA,K;;AAEA,U;AACA,uB;AACA,qB;AACA,qB;AACA,K;AACA,I;AACA,E;;AAEA,sE;AACA,6D;AACA,sE;AACA,kD;;AAEA,4C;;;;;;;;;;;;;;;;;;;AC3jCA,qC;AACA,kB;AACA,8B;AACA,E;;AAEA,qD;AACA,6B;AACA,kD;AACA,2B;AACA,E;;AAEA,2C;AACA,+B;AACA,oB;AACA,c;AACA,iC;AACA,iB;AACA,4D;AACA,K;AACA,2C;AACA,4C;AACA,6E;AACA,6C;AACA,oE;AACA,G;AACA,G;;AAEA,Y;AACA,kD;;;;;;;;;;;;;;;;;;;AC5BA,8D;AACA,kB;AACA,8C;AACA,E;;AAEA,2D;AACA,yB;AACA,oB;AACA,iB;AACA,W;AACA,uE;AACA,gD;AACA,oB;AACA,yD;AACA,S;AACA,e;AACA,G;AACA,G;;;AAGA,oE;AACA,qE;AACA,gE;AACA,mE;AACA,sB;AACA,kB;AACA,kD;AACA,uC;AACA,wE;AACA,8E;AACA,iB;AACA,4D;;AAEA,6D;AACA,G;;;;;;;;;;;;;;;;;;;AClCA,sE;AACA,iE;;AAEA,8C;AACA,kB;AACA,4C;AACA,kE;AACA,mC;AACA,yE;AACA,sF;AACA,e;AACA,4B;AACA,oC;AACA,G;AACA,uE;AACA,0D;AACA,yC;AACA,G;AACA,sB;AACA,0B;AACA,2B;AACA,oB;AACA,uB;AACA,8B;AACA,c;;AAEA,iC;AACA,e;AACA,mC;AACA,8C;AACA,M;AACA,U;AACA,gB;AACA,U;AACA,mC;AACA,yB;AACA,M;AACA,U;AACA,G;;AAEA,wB;AACA,+D;AACA,M;AACA,2B;;AAEA,iC;AACA,6E;AACA,6E;AACA,oE;AACA,G;;AAEA,4C;AACA,yD;AACA,4B;AACA,8B;AACA,0C;AACA,2B;AACA,yC;AACA,M;AACA,qC;;AAEA,yB;AACA,qD;AACA,gD;AACA,uD;AACA,uE;AACA,Y;AACA,8C;AACA,K;AACA,G;;AAEA,kE;AACA,oB;;AAEA,2D;AACA,6D;AACA,qE;AACA,oC;AACA,mD;AACA,+E;AACA,mC;AACA,Q;AACA,+E;AACA,wE;AACA,0E;AACA,0E;AACA,+E;AACA,6E;AACA,yC;AACA,gD;AACA,2E;AACA,0E;AACA,gF;AACA,gF;AACA,gB;AACA,mC;AACA,4C;;AAEA,kB;AACA,sC;AACA,Q;;AAEA,yB;AACA,4E;AACA,8B;AACA,uD;AACA,oD;;AAEA,+E;AACA,2E;AACA,sC;AACA,oC;AACA,oC;AACA,yB;AACA,oB;AACA,+C;AACA,4B;AACA,6C;AACA,kB;AACA,kD;AACA,sD;AACA,W;AACA,iB;AACA,yC;AACA,oB;AACA,0F;AACA,W;AACA,wE;AACA,2C;AACA,mB;AACA,uF;AACA,2C;AACA,2C;AACA,mB;AACA,qE;AACA,uC;AACA,8B;AACA,sD;AACA,wC;AACA,qC;AACA,uC;AACA,yC;AACA,sB;AACA,mC;AACA,qC;AACA,2C;AACA,e;AACA,e;AACA,uD;AACA,W;AACA,gB;AACA,wE;AACA,S;;AAEA,Q;;AAEA,iD;AACA,8B;AACA,2C;AACA,Q;;AAEA,+E;AACA,+B;AACA,kC;AACA,yC;AACA,Q;AACA,sC;AACA,oD;AACA,O;AACA,O;;AAEA,Y;AACA,4E;AACA,G;;AAEA,gC;;AAEA,gB;AACA,6E;AACA,oC;AACA,gD;AACA,yB;AACA,wB;AACA,G;AACA,E;;AAEA,G;AACA,uB;AACA,G;;;AAGA,uC;;AAEA,qC;AACA,yB;AACA,gB;AACA,Q;AACA,qB;AACA,I;;AAEA,oC;AACA,oB;AACA,0B;AACA,4C;AACA,Y;AACA,uB;AACA,kC;AACA,kB;AACA,K;AACA,I;;AAEA,4C;AACA,8D;AACA,8D;AACA,6C;AACA,oB;AACA,wC;AACA,iE;AACA,iE;AACA,I;;AAEA,+C;AACA,oB;AACA,wC;AACA,oE;AACA,oE;AACA,G;;AAEA,G;;AAEA,uE;AACA,6C;AACA,kC;AACA,wC;AACA,M;AACA,oC;AACA,0C;AACA,M;AACA,4B;AACA,kC;AACA,K;AACA,K;;AAEA,6E;AACA,kE;;AAEA,wD;AACA,kD;AACA,E;;AAEA,0E;AACA,+E;AACA,wE;AACA,sB;AACA,0D;AACA,mC;AACA,8C;AACA,+B;;AAEA,0D;AACA,2B;AACA,8B;;AAEA,e;AACA,0C;AACA,sE;AACA,kC;AACA,qD;AACA,yD;AACA,4D;AACA,iE;AACA,yC;AACA,uC;AACA,2C;AACA,K;AACA,sD;AACA,gD;AACA,4C;AACA,qD;AACA,S;AACA,K;AACA,U;AACA,uB;AACA,K;AACA,K;AACA,a;AACA,E;;AAEA,qE;AACA,W;AACA,sD;AACA,uC;;AAEA,yC;AACA,wB;AACA,sE;AACA,oE;AACA,wB;AACA,wB;AACA,uB;AACA,wB;AACA,mB;AACA,qC;;AAEA,kB;AACA,E;;AAEA,8D;AACA,gE;AACA,2B;AACA,mE;AACA,6B;AACA,G;AACA,E;;AAEA,qE;AACA,yB;AACA,E;AACA,qE;AACA,6D;AACA,qE;AACA,oE;AACA,sE;AACA,+D;AACA,wE;AACA,E;AACA,0D;AACA,6D;AACA,uB;AACA,E;AACA,gE;AACA,qE;AACA,iB;AACA,E;AACA,mE;AACA,oE;AACA,8D;AACA,kE;AACA,O;AACA,wD;AACA,kE;AACA,oB;AACA,oC;AACA,iB;AACA,Y;;AAEA,iE;AACA,4B;;AAEA,uC;AACA,oE;AACA,mE;AACA,gE;AACA,qE;AACA,c;AACA,iC;AACA,gB;AACA,wE;AACA,Q;AACA,K;;AAEA,4B;AACA,uB;AACA,uD;AACA,qD;AACA,sC;AACA,6B;AACA,0B;AACA,qC;AACA,4D;AACA,4F;AACA,c;AACA,8C;AACA,O;AACA,Y;AACA,4D;AACA,K;;AAEA,wB;AACA,mB;AACA,kD;AACA,uC;AACA,Q;AACA,K;;AAEA,iE;AACA,mE;AACA,mB;;AAEA,mD;AACA,oE;AACA,sD;AACA,8E;AACA,6E;AACA,4E;AACA,8C;AACA,O;;AAEA,yE;;AAEA,Y;AACA,gE;AACA,qC;AACA,iC;AACA,W;AACA,6D;AACA,mB;AACA,uB;AACA,sB;AACA,sB;AACA,S;AACA,gB;AACA,O;AACA,K;;AAEA,oE;AACA,yD;AACA,e;AACA,I;AACA,G;;AAEA,6E;AACA,oC;AACA,sE;AACA,kB;AACA,qC;AACA,wE;AACA,gD;AACA,E;AACA,2D;AACA,kB;AACA,mC;AACA,sE;AACA,qC;AACA,E;AACA,2E;AACA,kB;AACA,gD;AACA,mF;AACA,qD;AACA,E;;AAEA,uD;;AAEA,G;AACA,sC;AACA,G;;AAEA,uE;AACA,gB;AACA,E;AACA,yC;AACA,mD;AACA,E;AACA,4D;AACA,wD;AACA,qE;AACA,E;AACA,0C;AACA,uD;AACA,E;AACA,wB;AACA,uE;AACA,0D;AACA,E;AACA,kE;AACA,wB;AACA,qE;AACA,oE;AACA,uB;AACA,2E;AACA,6E;AACA,sC;AACA,E;AACA,8E;AACA,6E;AACA,mC;;AAEA,c;AACA,qD;AACA,oB;AACA,0E;AACA,4C;AACA,uC;AACA,+D;AACA,O;;AAEA,oB;AACA,4B;;AAEA,4D;AACA,0B;AACA,mD;AACA,yF;AACA,S;AACA,4B;AACA,oD;AACA,8B;AACA,6E;AACA,gE;AACA,O;AACA,O;;AAEA,sE;AACA,0E;AACA,6B;AACA,4D;AACA,+D;AACA,8E;AACA,O;AACA,uC;AACA,K;AACA,I;;AAEA,yD;AACA,8C;AACA,I;AACA,wD;AACA,6C;AACA,I;AACA,K;;;AAGA,iE;AACA,kB;;AAEA,qE;AACA,iE;AACA,2B;;AAEA,8E;AACA,4E;AACA,+E;AACA,uB;AACA,6B;;AAEA,sB;AACA,kC;AACA,kC;AACA,kC;AACA,c;AACA,yB;AACA,I;;AAEA,kB;AACA,mC;;AAEA,gE;AACA,gC;AACA,wC;;AAEA,qB;AACA,yB;AACA,e;;AAEA,8D;AACA,uD;AACA,6E;AACA,sC;AACA,a;AACA,kC;;AAEA,2E;AACA,iC;AACA,2C;AACA,sD;AACA,mB;AACA,W;;AAEA,2E;AACA,+E;AACA,iC;AACA,kC;AACA,yD;;AAEA,iC;AACA,6D;AACA,8D;AACA,qC;AACA,8E;AACA,6D;AACA,a;;AAEA,qC;AACA,kF;AACA,4E;AACA,kE;AACA,0C;AACA,6E;AACA,4D;AACA,iE;AACA,kB;AACA,+E;AACA,4B;AACA,yD;AACA,W;AACA,qB;AACA,uE;AACA,sD;AACA,kB;AACA,oB;AACA,W;AACA,S;AACA,Q;AACA,O;AACA,iE;AACA,sD;AACA,oE;AACA,8D;AACA,kC;AACA,G;AACA,E;;;AAGA,8D;AACA,kB;;AAEA,yC;AACA,iB;AACA,uE;AACA,Y;AACA,6C;AACA,oE;AACA,oC;AACA,K;AACA,G;AACA,E;;AAEA,uD;AACA,kB;AACA,mC;AACA,8B;AACA,wB;AACA,E;;AAEA,+C;AACA,gB;AACA,0B;AACA,gD;AACA,a;AACA,E;;AAEA,sE;AACA,kB;;AAEA,0B;AACA,wC;AACA,+D;AACA,4D;AACA,O;AACA,iD;AACA,G;AACA,wE;AACA,gE;AACA,6D;AACA,O;AACA,iD;AACA,G;;AAEA,sD;AACA,E;;AAEA,8C;AACA,0B;AACA,oC;AACA,a;AACA,E;;AAEA,uE;AACA,mE;AACA,kE;AACA,2C;AACA,wD;AACA,yC;AACA,kB;;AAEA,8D;AACA,iE;;AAEA,4B;AACA,kB;AACA,yC;AACA,+B;AACA,6B;AACA,wJ;AACA,uD;AACA,6B;AACA,2F;AACA,Y;AACA,+C;AACA,6D;AACA,yB;AACA,sC;AACA,yD;;AAEA,mD;AACA,uC;AACA,6B;AACA,S;AACA,K;AACA,K;;AAEA,sC;AACA,yC;AACA,4B;AACA,wD;AACA,wC;AACA,O;AACA,G;;AAEA,4D;AACA,+B;AACA,W;;AAEA,mB;;AAEA,0B;AACA,wC;AACA,+D;AACA,sB;AACA,kD;AACA,4B;AACA,kC;AACA,4B;AACA,8B;AACA,O;AACA,iD;AACA,G;AACA,wE;AACA,gE;AACA,sB;AACA,kD;AACA,6B;AACA,mC;AACA,6B;AACA,+B;AACA,O;AACA,iD;AACA,G;;AAEA,4E;AACA,6E;AACA,+E;AACA,4B;;AAEA,+B;AACA,kD;AACA,E;;AAEA,iE;AACA,8D;AACA,oE;AACA,8D;AACA,uE;AACA,6D;AACA,iC;AACA,qE;AACA,6B;AACA,E;;AAEA,sE;AACA,8B;AACA,2E;AACA,kB;;AAEA,sC;AACA,yC;AACA,4B;AACA,wD;AACA,wC;AACA,O;AACA,G;;AAEA,4D;AACA,W;AACA,W;;AAEA,0B;AACA,wC;AACA,+D;AACA,2D;AACA,O;AACA,iD;AACA,G;AACA,wE;AACA,gE;AACA,4D;AACA,O;AACA,iD;AACA,G;;AAEA,4E;AACA,gF;AACA,8E;AACA,sC;;AAEA,2D;AACA,E","sourcesContent":["/**\n * Provide a synchronous Collection API using fibers, backed by\n * MongoDB.  This is only for use on the server, and mostly identical\n * to the client API.\n *\n * NOTE: the public API methods must be run within a fiber. If you call\n * these outside of a fiber they will explode!\n */\n\nvar path = Npm.require('path');\nvar MongoDB = Npm.require('mongodb');\nvar Fiber = Npm.require('fibers');\nvar Future = Npm.require(path.join('fibers', 'future'));\n\nMongoInternals = {};\n\nvar replaceNames = function (filter, thing) {\n  if (typeof thing === \"object\") {\n    if (_.isArray(thing)) {\n      return _.map(thing, _.bind(replaceNames, null, filter));\n    }\n    var ret = {};\n    _.each(thing, function (value, key) {\n      ret[filter(key)] = replaceNames(filter, value);\n    });\n    return ret;\n  }\n  return thing;\n};\n\nvar makeMongoLegal = function (name) { return \"EJSON\" + name; };\nvar unmakeMongoLegal = function (name) { return name.substr(5); };\n\nvar replaceMongoAtomWithMeteor = function (document) {\n  if (document instanceof MongoDB.Binary) {\n    var buffer = document.value(true);\n    return new Uint8Array(buffer);\n  }\n  if (document instanceof MongoDB.ObjectID) {\n    return new Meteor.Collection.ObjectID(document.toHexString());\n  }\n  if (document[\"EJSON$type\"] && document[\"EJSON$value\"]) {\n    return EJSON.fromJSONValue(replaceNames(unmakeMongoLegal, document));\n  }\n  return undefined;\n};\n\nvar replaceMeteorAtomWithMongo = function (document) {\n  if (EJSON.isBinary(document)) {\n    // This does more copies than we'd like, but is necessary because\n    // MongoDB.BSON only looks like it takes a Uint8Array (and doesn't actually\n    // serialize it correctly).\n    return new MongoDB.Binary(new Buffer(document));\n  }\n  if (document instanceof Meteor.Collection.ObjectID) {\n    return new MongoDB.ObjectID(document.toHexString());\n  } else if (EJSON._isCustomType(document)) {\n    return replaceNames(makeMongoLegal, EJSON.toJSONValue(document));\n  }\n  // It is not ordinarily possible to stick dollar-sign keys into mongo\n  // so we don't bother checking for things that need escaping at this time.\n  return undefined;\n};\n\nvar replaceTypes = function (document, atomTransformer) {\n  if (typeof document !== 'object' || document === null)\n    return document;\n\n  var replacedTopLevelAtom = atomTransformer(document);\n  if (replacedTopLevelAtom !== undefined)\n    return replacedTopLevelAtom;\n\n  var ret = document;\n  _.each(document, function (val, key) {\n    var valReplaced = replaceTypes(val, atomTransformer);\n    if (val !== valReplaced) {\n      // Lazy clone. Shallow copy.\n      if (ret === document)\n        ret = _.clone(document);\n      ret[key] = valReplaced;\n    }\n  });\n  return ret;\n};\n\n\nMongoConnection = function (url) {\n  var self = this;\n  self._connectCallbacks = [];\n  self._liveResultsSets = {};\n\n  var options = {db: {safe: true}};\n\n  // Set autoReconnect to true, unless passed on the URL. Why someone\n  // would want to set autoReconnect to false, I'm not really sure, but\n  // keeping this for backwards compatibility for now.\n  if (!(/[\\?&]auto_?[rR]econnect=/.test(url))) {\n    options.server = {auto_reconnect: true};\n  }\n\n  // Disable the native parser by default, unless specifically enabled\n  // in the mongo URL.\n  // - The native driver can cause errors which normally would be\n  //   thrown, caught, and handled into segfaults that take down the\n  //   whole app.\n  // - Binary modules don't yet work when you bundle and move the bundle\n  //   to a different platform (aka deploy)\n  // We should revisit this after binary npm module support lands.\n  if (!(/[\\?&]native_?[pP]arser=/.test(url))) {\n    options.db.native_parser = false;\n  }\n\n  MongoDB.connect(url, options, function(err, db) {\n    if (err)\n      throw err;\n    self.db = db;\n\n    Fiber(function () {\n      // drain queue of pending callbacks\n      _.each(self._connectCallbacks, function (c) {\n        c(db);\n      });\n    }).run();\n  });\n};\n\nMongoConnection.prototype.close = function() {\n  var self = this;\n  // Use Future.wrap so that errors get thrown. This happens to\n  // work even outside a fiber since the 'close' method is not\n  // actually asynchronous.\n  Future.wrap(_.bind(self.db.close, self.db))(true).wait();\n};\n\nMongoConnection.prototype._withDb = function (callback) {\n  var self = this;\n  if (self.db) {\n    callback(self.db);\n  } else {\n    self._connectCallbacks.push(callback);\n  }\n};\n\n// Returns the Mongo Collection object; may yield.\nMongoConnection.prototype._getCollection = function (collectionName) {\n  var self = this;\n\n  var future = new Future;\n  self._withDb(function (db) {\n    db.collection(collectionName, future.resolver());\n  });\n  return future.wait();\n};\n\nMongoConnection.prototype._createCappedCollection = function (collectionName,\n                                                              byteSize) {\n  var self = this;\n  var future = new Future();\n  self._withDb(function (db) {\n    db.createCollection(collectionName, {capped: true, size: byteSize},\n                        future.resolver());\n  });\n  future.wait();\n};\n\n// This should be called synchronously with a write, to create a\n// transaction on the current write fence, if any. After we can read\n// the write, and after observers have been notified (or at least,\n// after the observer notifiers have added themselves to the write\n// fence), you should call 'committed()' on the object returned.\nMongoConnection.prototype._maybeBeginWrite = function () {\n  var self = this;\n  var fence = DDPServer._CurrentWriteFence.get();\n  if (fence)\n    return fence.beginWrite();\n  else\n    return {committed: function () {}};\n};\n\n//////////// Public API //////////\n\n// The write methods block until the database has confirmed the write (it may\n// not be replicated or stable on disk, but one server has confirmed it) if no\n// callback is provided. If a callback is provided, then they call the callback\n// when the write is confirmed. They return nothing on success, and raise an\n// exception on failure.\n//\n// After making a write (with insert, update, remove), observers are\n// notified asynchronously. If you want to receive a callback once all\n// of the observer notifications have landed for your write, do the\n// writes inside a write fence (set DDPServer._CurrentWriteFence to a new\n// _WriteFence, and then set a callback on the write fence.)\n//\n// Since our execution environment is single-threaded, this is\n// well-defined -- a write \"has been made\" if it's returned, and an\n// observer \"has been notified\" if its callback has returned.\n\nvar writeCallback = function (write, refresh, callback) {\n  return Meteor.bindEnvironment(function (err, result) {\n    if (! err) {\n      // XXX We don't have to run this on error, right?\n      refresh();\n    }\n    write.committed();\n    if (callback)\n      callback(err, result);\n    else if (err)\n      throw err;\n  }, function (err) {\n    Meteor._debug(\"Error in Mongo write:\", err.stack);\n  });\n};\n\nMongoConnection.prototype._insert = function (collection_name, document,\n                                              callback) {\n  var self = this;\n  if (collection_name === \"___meteor_failure_test_collection\") {\n    var e = new Error(\"Failure test\");\n    e.expected = true;\n    if (callback)\n      return callback(e);\n    else\n      throw e;\n  }\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    Meteor.refresh({ collection: collection_name, id: document._id });\n  };\n  callback = writeCallback(write, refresh, callback);\n  try {\n    var collection = self._getCollection(collection_name);\n    collection.insert(replaceTypes(document, replaceMeteorAtomWithMongo),\n                      {safe: true}, callback);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\n// Cause queries that may be affected by the selector to poll in this write\n// fence.\nMongoConnection.prototype._refresh = function (collectionName, selector) {\n  var self = this;\n  var refreshKey = {collection: collectionName};\n  // If we know which documents we're removing, don't poll queries that are\n  // specific to other documents. (Note that multiple notifications here should\n  // not cause multiple polls, since all our listener is doing is enqueueing a\n  // poll.)\n  var specificIds = LocalCollection._idsMatchedBySelector(selector);\n  if (specificIds) {\n    _.each(specificIds, function (id) {\n      Meteor.refresh(_.extend({id: id}, refreshKey));\n    });\n  } else {\n    Meteor.refresh(refreshKey);\n  }\n};\n\nMongoConnection.prototype._remove = function (collection_name, selector,\n                                              callback) {\n  var self = this;\n\n  if (collection_name === \"___meteor_failure_test_collection\") {\n    var e = new Error(\"Failure test\");\n    e.expected = true;\n    if (callback)\n      return callback(e);\n    else\n      throw e;\n  }\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    self._refresh(collection_name, selector);\n  };\n  callback = writeCallback(write, refresh, callback);\n\n  try {\n    var collection = self._getCollection(collection_name);\n    collection.remove(replaceTypes(selector, replaceMeteorAtomWithMongo),\n                      {safe: true}, callback);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\nMongoConnection.prototype._update = function (collection_name, selector, mod,\n                                              options, callback) {\n  var self = this;\n\n  if (! callback && options instanceof Function) {\n    callback = options;\n    options = null;\n  }\n\n  if (collection_name === \"___meteor_failure_test_collection\") {\n    var e = new Error(\"Failure test\");\n    e.expected = true;\n    if (callback)\n      return callback(e);\n    else\n      throw e;\n  }\n\n  // explicit safety check. null and undefined can crash the mongo\n  // driver. Although the node driver and minimongo do 'support'\n  // non-object modifier in that they don't crash, they are not\n  // meaningful operations and do not do anything. Defensively throw an\n  // error here.\n  if (!mod || typeof mod !== 'object')\n    throw new Error(\"Invalid modifier. Modifier must be an object.\");\n\n  if (!options) options = {};\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    self._refresh(collection_name, selector);\n  };\n  callback = writeCallback(write, refresh, callback);\n  try {\n    var collection = self._getCollection(collection_name);\n    var mongoOpts = {safe: true};\n    // explictly enumerate options that minimongo supports\n    if (options.upsert) mongoOpts.upsert = true;\n    if (options.multi) mongoOpts.multi = true;\n    collection.update(replaceTypes(selector, replaceMeteorAtomWithMongo),\n                      replaceTypes(mod, replaceMeteorAtomWithMongo),\n                      mongoOpts, callback);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\n_.each([\"insert\", \"update\", \"remove\"], function (method) {\n  MongoConnection.prototype[method] = function (/* arguments */) {\n    var self = this;\n    return Meteor._wrapAsync(self[\"_\" + method]).apply(self, arguments);\n  };\n});\n\nMongoConnection.prototype.find = function (collectionName, selector, options) {\n  var self = this;\n\n  if (arguments.length === 1)\n    selector = {};\n\n  return new Cursor(\n    self, new CursorDescription(collectionName, selector, options));\n};\n\nMongoConnection.prototype.findOne = function (collection_name, selector,\n                                              options) {\n  var self = this;\n  if (arguments.length === 1)\n    selector = {};\n\n  options = options || {};\n  options.limit = 1;\n  return self.find(collection_name, selector, options).fetch()[0];\n};\n\n// We'll actually design an index API later. For now, we just pass through to\n// Mongo's, but make it synchronous.\nMongoConnection.prototype._ensureIndex = function (collectionName, index,\n                                                   options) {\n  var self = this;\n  options = _.extend({safe: true}, options);\n\n  // We expect this function to be called at startup, not from within a method,\n  // so we don't interact with the write fence.\n  var collection = self._getCollection(collectionName);\n  var future = new Future;\n  var indexName = collection.ensureIndex(index, options, future.resolver());\n  future.wait();\n};\nMongoConnection.prototype._dropIndex = function (collectionName, index) {\n  var self = this;\n\n  // This function is only used by test code, not within a method, so we don't\n  // interact with the write fence.\n  var collection = self._getCollection(collectionName);\n  var future = new Future;\n  var indexName = collection.dropIndex(index, future.resolver());\n  future.wait();\n};\n\n// CURSORS\n\n// There are several classes which relate to cursors:\n//\n// CursorDescription represents the arguments used to construct a cursor:\n// collectionName, selector, and (find) options.  Because it is used as a key\n// for cursor de-dup, everything in it should either be JSON-stringifiable or\n// not affect observeChanges output (eg, options.transform functions are not\n// stringifiable but do not affect observeChanges).\n//\n// SynchronousCursor is a wrapper around a MongoDB cursor\n// which includes fully-synchronous versions of forEach, etc.\n//\n// Cursor is the cursor object returned from find(), which implements the\n// documented Meteor.Collection cursor API.  It wraps a CursorDescription and a\n// SynchronousCursor (lazily: it doesn't contact Mongo until you call a method\n// like fetch or forEach on it).\n//\n// ObserveHandle is the \"observe handle\" returned from observeChanges. It has a\n// reference to a LiveResultsSet.\n//\n// LiveResultsSet caches the results of a query and reruns it when necessary.\n// It is hooked up to one or more ObserveHandles; a single LiveResultsSet\n// can drive multiple sets of observation callbacks if they are for the\n// same query.\n\n\nvar CursorDescription = function (collectionName, selector, options) {\n  var self = this;\n  self.collectionName = collectionName;\n  self.selector = Meteor.Collection._rewriteSelector(selector);\n  self.options = options || {};\n};\n\nvar Cursor = function (mongo, cursorDescription) {\n  var self = this;\n\n  self._mongo = mongo;\n  self._cursorDescription = cursorDescription;\n  self._synchronousCursor = null;\n};\n\n_.each(['forEach', 'map', 'rewind', 'fetch', 'count'], function (method) {\n  Cursor.prototype[method] = function () {\n    var self = this;\n\n    // You can only observe a tailable cursor.\n    if (self._cursorDescription.options.tailable)\n      throw new Error(\"Cannot call \" + method + \" on a tailable cursor\");\n\n    if (!self._synchronousCursor)\n      self._synchronousCursor = self._mongo._createSynchronousCursor(\n        self._cursorDescription, true);\n\n    return self._synchronousCursor[method].apply(\n      self._synchronousCursor, arguments);\n  };\n});\n\nCursor.prototype.getTransform = function () {\n  var self = this;\n  return self._cursorDescription.options.transform;\n};\n\n// When you call Meteor.publish() with a function that returns a Cursor, we need\n// to transmute it into the equivalent subscription.  This is the function that\n// does that.\n\nCursor.prototype._publishCursor = function (sub) {\n  var self = this;\n  var collection = self._cursorDescription.collectionName;\n  return Meteor.Collection._publishCursor(self, sub, collection);\n};\n\n// Used to guarantee that publish functions return at most one cursor per\n// collection. Private, because we might later have cursors that include\n// documents from multiple collections somehow.\nCursor.prototype._getCollectionName = function () {\n  var self = this;\n  return self._cursorDescription.collectionName;\n}\n\nCursor.prototype.observe = function (callbacks) {\n  var self = this;\n  return LocalCollection._observeFromObserveChanges(self, callbacks);\n};\n\nCursor.prototype.observeChanges = function (callbacks) {\n  var self = this;\n  var ordered = LocalCollection._isOrderedChanges(callbacks);\n  return self._mongo._observeChanges(\n    self._cursorDescription, ordered, callbacks);\n};\n\nMongoConnection.prototype._createSynchronousCursor = function(cursorDescription,\n                                                              useTransform) {\n  var self = this;\n\n  var collection = self._getCollection(cursorDescription.collectionName);\n  var options = cursorDescription.options;\n  var mongoOptions = {\n    sort: options.sort,\n    limit: options.limit,\n    skip: options.skip\n  };\n\n  // Do we want a tailable cursor (which only works on capped collections)?\n  if (options.tailable) {\n    // We want a tailable cursor...\n    mongoOptions.tailable = true;\n    // ... and for the server to wait a bit if any getMore has no data (rather\n    // than making us put the relevant sleeps in the client)...\n    mongoOptions.awaitdata = true;\n    // ... and to keep querying the server indefinitely rather than just 5 times\n    // if there's no more data.\n    mongoOptions.numberOfRetries = -1;\n  }\n\n  var dbCursor = collection.find(\n    replaceTypes(cursorDescription.selector, replaceMeteorAtomWithMongo),\n    options.fields, mongoOptions);\n\n  return new SynchronousCursor(dbCursor, cursorDescription, useTransform);\n};\n\nvar SynchronousCursor = function (dbCursor, cursorDescription, useTransform) {\n  var self = this;\n  self._dbCursor = dbCursor;\n  self._cursorDescription = cursorDescription;\n  if (useTransform && cursorDescription.options.transform) {\n    self._transform = Deps._makeNonreactive(\n      cursorDescription.options.transform\n    );\n  } else {\n    self._transform = null;\n  }\n\n  // Need to specify that the callback is the first argument to nextObject,\n  // since otherwise when we try to call it with no args the driver will\n  // interpret \"undefined\" first arg as an options hash and crash.\n  self._synchronousNextObject = Future.wrap(\n    dbCursor.nextObject.bind(dbCursor), 0);\n  self._synchronousCount = Future.wrap(dbCursor.count.bind(dbCursor));\n  self._visitedIds = {};\n};\n\n_.extend(SynchronousCursor.prototype, {\n  _nextObject: function () {\n    var self = this;\n    while (true) {\n      var doc = self._synchronousNextObject().wait();\n      if (!doc || !doc._id) return null;\n      doc = replaceTypes(doc, replaceMongoAtomWithMeteor);\n\n      if (!self._cursorDescription.options.tailable) {\n        // Did Mongo give us duplicate documents in the same cursor? If so,\n        // ignore this one. (Do this before the transform, since transform might\n        // return some unrelated value.) We don't do this for tailable cursors,\n        // because we want to maintain O(1) memory usage.\n        var strId = LocalCollection._idStringify(doc._id);\n        if (self._visitedIds[strId]) continue;\n        self._visitedIds[strId] = true;\n      }\n\n      if (self._transform)\n        doc = self._transform(doc);\n\n      return doc;\n    }\n  },\n\n  // XXX Make more like ECMA forEach:\n  //     https://github.com/meteor/meteor/pull/63#issuecomment-5320050\n  forEach: function (callback) {\n    var self = this;\n\n    // We implement the loop ourself instead of using self._dbCursor.each,\n    // because \"each\" will call its callback outside of a fiber which makes it\n    // much more complex to make this function synchronous.\n    while (true) {\n      var doc = self._nextObject();\n      if (!doc) return;\n      callback(doc);\n    }\n  },\n\n  // XXX Make more like ECMA map:\n  //     https://github.com/meteor/meteor/pull/63#issuecomment-5320050\n  // XXX Allow overlapping callback executions if callback yields.\n  map: function (callback) {\n    var self = this;\n    var res = [];\n    self.forEach(function (doc) {\n      res.push(callback(doc));\n    });\n    return res;\n  },\n\n  rewind: function () {\n    var self = this;\n\n    // known to be synchronous\n    self._dbCursor.rewind();\n\n    self._visitedIds = {};\n  },\n\n  // Mostly usable for tailable cursors.\n  close: function () {\n    var self = this;\n\n    self._dbCursor.close();\n  },\n\n  fetch: function () {\n    var self = this;\n    return self.map(_.identity);\n  },\n\n  count: function () {\n    var self = this;\n    return self._synchronousCount().wait();\n  },\n\n  // This method is NOT wrapped in Cursor.\n  getRawObjects: function (ordered) {\n    var self = this;\n    if (ordered) {\n      return self.fetch();\n    } else {\n      var results = {};\n      self.forEach(function (doc) {\n        results[doc._id] = doc;\n      });\n      return results;\n    }\n  }\n});\n\nvar nextObserveHandleId = 1;\nvar ObserveHandle = function (liveResultsSet, callbacks) {\n  var self = this;\n  self._liveResultsSet = liveResultsSet;\n  self._added = callbacks.added;\n  self._addedBefore = callbacks.addedBefore;\n  self._changed = callbacks.changed;\n  self._removed = callbacks.removed;\n  self._moved = callbacks.moved;\n  self._movedBefore = callbacks.movedBefore;\n  self._observeHandleId = nextObserveHandleId++;\n};\nObserveHandle.prototype.stop = function () {\n  var self = this;\n  self._liveResultsSet._removeObserveHandle(self);\n  self._liveResultsSet = null;\n};\n\nMongoConnection.prototype._observeChanges = function (\n    cursorDescription, ordered, callbacks) {\n  var self = this;\n\n  if (cursorDescription.options.tailable) {\n    return self._observeChangesTailable(cursorDescription, ordered, callbacks);\n  }\n\n  var observeKey = JSON.stringify(\n    _.extend({ordered: ordered}, cursorDescription));\n\n  var liveResultsSet;\n  var observeHandle;\n  var newlyCreated = false;\n\n  // Find a matching LiveResultsSet, or create a new one. This next block is\n  // guaranteed to not yield (and it doesn't call anything that can observe a\n  // new query), so no other calls to this function can interleave with it.\n  Meteor._noYieldsAllowed(function () {\n    if (_.has(self._liveResultsSets, observeKey)) {\n      liveResultsSet = self._liveResultsSets[observeKey];\n    } else {\n      // Create a new LiveResultsSet. It is created \"locked\": no polling can\n      // take place.\n      liveResultsSet = new LiveResultsSet(\n        cursorDescription,\n        self,\n        ordered,\n        function () {\n          delete self._liveResultsSets[observeKey];\n        },\n        callbacks._testOnlyPollCallback);\n      self._liveResultsSets[observeKey] = liveResultsSet;\n      newlyCreated = true;\n    }\n    observeHandle = new ObserveHandle(liveResultsSet, callbacks);\n  });\n\n  if (newlyCreated) {\n    // This is the first ObserveHandle on this LiveResultsSet.  Add it and run\n    // the initial synchronous poll (which may yield).\n    liveResultsSet._addFirstObserveHandle(observeHandle);\n  } else {\n    // Not the first ObserveHandle. Add it to the LiveResultsSet. This call\n    // yields until we're not in the middle of a poll, and its invocation of the\n    // initial 'added' callbacks may yield as well. It blocks until the 'added'\n    // callbacks have fired.\n    liveResultsSet._addObserveHandleAndSendInitialAdds(observeHandle);\n  }\n\n  return observeHandle;\n};\n\nvar LiveResultsSet = function (cursorDescription, mongoHandle, ordered,\n                               stopCallback, testOnlyPollCallback) {\n  var self = this;\n\n  self._cursorDescription = cursorDescription;\n  self._mongoHandle = mongoHandle;\n  self._ordered = ordered;\n  self._stopCallbacks = [stopCallback];\n\n  // This constructor cannot yield, so we don't create the synchronousCursor yet\n  // (since that can yield).\n  self._synchronousCursor = null;\n\n  // previous results snapshot.  on each poll cycle, diffs against\n  // results drives the callbacks.\n  self._results = ordered ? [] : {};\n\n  // The number of _pollMongo calls that have been added to self._taskQueue but\n  // have not started running. Used to make sure we never schedule more than one\n  // _pollMongo (other than possibly the one that is currently running). It's\n  // also used by _suspendPolling to pretend there's a poll scheduled. Usually,\n  // it's either 0 (for \"no polls scheduled other than maybe one currently\n  // running\") or 1 (for \"a poll scheduled that isn't running yet\"), but it can\n  // also be 2 if incremented by _suspendPolling.\n  self._pollsScheduledButNotStarted = 0;\n  // Number of _addObserveHandleAndSendInitialAdds tasks scheduled but not yet\n  // running. _removeObserveHandle uses this to know if it's safe to shut down\n  // this LiveResultsSet.\n  self._addHandleTasksScheduledButNotPerformed = 0;\n  self._pendingWrites = []; // people to notify when polling completes\n\n  // Make sure to create a separately throttled function for each LiveResultsSet\n  // object.\n  self._ensurePollIsScheduled = _.throttle(\n    self._unthrottledEnsurePollIsScheduled, 50 /* ms */);\n\n  self._taskQueue = new Meteor._SynchronousQueue();\n\n  // Listen for the invalidation messages that will trigger us to poll the\n  // database for changes. If this selector specifies specific IDs, specify them\n  // here, so that updates to different specific IDs don't cause us to poll.\n  var listenOnTrigger = function (trigger) {\n    var listener = DDPServer._InvalidationCrossbar.listen(\n      trigger, function (notification, complete) {\n        // When someone does a transaction that might affect us, schedule a poll\n        // of the database. If that transaction happens inside of a write fence,\n        // block the fence until we've polled and notified observers.\n        var fence = DDPServer._CurrentWriteFence.get();\n        if (fence)\n          self._pendingWrites.push(fence.beginWrite());\n        // Ensure a poll is scheduled... but if we already know that one is,\n        // don't hit the throttled _ensurePollIsScheduled function (which might\n        // lead to us calling it unnecessarily in 50ms).\n        if (self._pollsScheduledButNotStarted === 0)\n          self._ensurePollIsScheduled();\n        complete();\n      });\n    self._stopCallbacks.push(function () { listener.stop(); });\n  };\n  var key = {collection: cursorDescription.collectionName};\n  var specificIds = LocalCollection._idsMatchedBySelector(\n    cursorDescription.selector);\n  if (specificIds) {\n    _.each(specificIds, function (id) {\n      listenOnTrigger(_.extend({id: id}, key));\n    });\n  } else {\n    listenOnTrigger(key);\n  }\n\n  // Map from handle ID to ObserveHandle.\n  self._observeHandles = {};\n\n  self._callbackMultiplexer = {};\n  var callbackNames = ['added', 'changed', 'removed'];\n  if (self._ordered) {\n    callbackNames.push('moved');\n    callbackNames.push('addedBefore');\n    callbackNames.push('movedBefore');\n  }\n  _.each(callbackNames, function (callback) {\n    var handleCallback = '_' + callback;\n    self._callbackMultiplexer[callback] = function () {\n      var args = _.toArray(arguments);\n      // Because callbacks can yield and _removeObserveHandle() (ie,\n      // handle.stop()) doesn't synchronize its actions with _taskQueue,\n      // ObserveHandles can disappear from self._observeHandles during this\n      // dispatch. Thus, we save a copy of the keys of self._observeHandles\n      // before we start to iterate, and we check to see if the handle is still\n      // there each time.\n      _.each(_.keys(self._observeHandles), function (handleId) {\n        var handle = self._observeHandles[handleId];\n        if (handle && handle[handleCallback])\n          handle[handleCallback].apply(null, EJSON.clone(args));\n      });\n    };\n  });\n\n  // every once and a while, poll even if we don't think we're dirty, for\n  // eventual consistency with database writes from outside the Meteor\n  // universe.\n  //\n  // For testing, there's an undocumented callback argument to observeChanges\n  // which disables time-based polling and gets called at the beginning of each\n  // poll.\n  if (testOnlyPollCallback) {\n    self._testOnlyPollCallback = testOnlyPollCallback;\n  } else {\n    var intervalHandle = Meteor.setInterval(\n      _.bind(self._ensurePollIsScheduled, self), 10 * 1000);\n    self._stopCallbacks.push(function () {\n      Meteor.clearInterval(intervalHandle);\n    });\n  }\n};\n\n_.extend(LiveResultsSet.prototype, {\n  _addFirstObserveHandle: function (handle) {\n    var self = this;\n    if (! _.isEmpty(self._observeHandles))\n      throw new Error(\"Not the first observe handle!\");\n    if (! _.isEmpty(self._results))\n      throw new Error(\"Call _addFirstObserveHandle before polling!\");\n\n    self._observeHandles[handle._observeHandleId] = handle;\n\n    // Run the first _poll() cycle synchronously (delivering results to the\n    // first ObserveHandle).\n    ++self._pollsScheduledButNotStarted;\n    self._taskQueue.runTask(function () {\n      self._pollMongo();\n    });\n  },\n\n  // This is always called through _.throttle.\n  _unthrottledEnsurePollIsScheduled: function () {\n    var self = this;\n    if (self._pollsScheduledButNotStarted > 0)\n      return;\n    ++self._pollsScheduledButNotStarted;\n    self._taskQueue.queueTask(function () {\n      self._pollMongo();\n    });\n  },\n\n  // test-only interface for controlling polling.\n  //\n  // _suspendPolling blocks until any currently running and scheduled polls are\n  // done, and prevents any further polls from being scheduled. (new\n  // ObserveHandles can be added and receive their initial added callbacks,\n  // though.)\n  //\n  // _resumePolling immediately polls, and allows further polls to occur.\n  _suspendPolling: function() {\n    var self = this;\n    // Pretend that there's another poll scheduled (which will prevent\n    // _ensurePollIsScheduled from queueing any more polls).\n    ++self._pollsScheduledButNotStarted;\n    // Now block until all currently running or scheduled polls are done.\n    self._taskQueue.runTask(function() {});\n\n    // Confirm that there is only one \"poll\" (the fake one we're pretending to\n    // have) scheduled.\n    if (self._pollsScheduledButNotStarted !== 1)\n      throw new Error(\"_pollsScheduledButNotStarted is \" +\n                      self._pollsScheduledButNotStarted);\n  },\n  _resumePolling: function() {\n    var self = this;\n    // We should be in the same state as in the end of _suspendPolling.\n    if (self._pollsScheduledButNotStarted !== 1)\n      throw new Error(\"_pollsScheduledButNotStarted is \" +\n                      self._pollsScheduledButNotStarted);\n    // Run a poll synchronously (which will counteract the\n    // ++_pollsScheduledButNotStarted from _suspendPolling).\n    self._taskQueue.runTask(function () {\n      self._pollMongo();\n    });\n  },\n\n  _pollMongo: function () {\n    var self = this;\n    --self._pollsScheduledButNotStarted;\n\n    self._testOnlyPollCallback && self._testOnlyPollCallback();\n\n    // Save the list of pending writes which this round will commit.\n    var writesForCycle = self._pendingWrites;\n    self._pendingWrites = [];\n\n    // Get the new query results. (These calls can yield.)\n    if (self._synchronousCursor) {\n      self._synchronousCursor.rewind();\n    } else {\n      self._synchronousCursor = self._mongoHandle._createSynchronousCursor(\n        self._cursorDescription, false /* !useTransform */);\n    }\n    var newResults = self._synchronousCursor.getRawObjects(self._ordered);\n    var oldResults = self._results;\n\n    // Run diffs. (This can yield too.)\n    if (!_.isEmpty(self._observeHandles)) {\n      LocalCollection._diffQueryChanges(\n        self._ordered, oldResults, newResults, self._callbackMultiplexer);\n    }\n\n    // Replace self._results atomically.\n    self._results = newResults;\n\n    // Mark all the writes which existed before this call as commmitted. (If new\n    // writes have shown up in the meantime, there'll already be another\n    // _pollMongo task scheduled.)\n    _.each(writesForCycle, function (w) {w.committed();});\n  },\n\n  // Adds the observe handle to this set and sends its initial added\n  // callbacks. Meteor._SynchronousQueue guarantees that this won't interleave\n  // with a call to _pollMongo or another call to this function.\n  _addObserveHandleAndSendInitialAdds: function (handle) {\n    var self = this;\n\n    // Check this before calling runTask (even though runTask does the same\n    // check) so that we don't leak a LiveResultsSet by incrementing\n    // _addHandleTasksScheduledButNotPerformed and never decrementing it.\n    if (!self._taskQueue.safeToRunTask())\n      throw new Error(\n        \"Can't call observe() from an observe callback on the same query\");\n\n    // Keep track of how many of these tasks are on the queue, so that\n    // _removeObserveHandle knows if it's safe to GC.\n    ++self._addHandleTasksScheduledButNotPerformed;\n\n    self._taskQueue.runTask(function () {\n      if (!self._observeHandles)\n        throw new Error(\"Can't add observe handle to stopped LiveResultsSet\");\n\n      if (_.has(self._observeHandles, handle._observeHandleId))\n        throw new Error(\"Duplicate observe handle ID\");\n      self._observeHandles[handle._observeHandleId] = handle;\n      --self._addHandleTasksScheduledButNotPerformed;\n\n      // Send initial adds.\n      if (handle._added || handle._addedBefore) {\n        _.each(self._results, function (doc, i) {\n          var fields = EJSON.clone(doc);\n          delete fields._id;\n          if (self._ordered) {\n            handle._added && handle._added(doc._id, fields);\n            handle._addedBefore && handle._addedBefore(doc._id, fields, null);\n          } else {\n            handle._added(doc._id, fields);\n          }\n        });\n      }\n    });\n  },\n\n  // Remove an observe handle. If it was the last observe handle, call all the\n  // stop callbacks; you cannot add any more observe handles after this.\n  //\n  // This is not synchronized with polls and handle additions: this means that\n  // you can safely call it from within an observe callback.\n  _removeObserveHandle: function (handle) {\n    var self = this;\n\n    if (!_.has(self._observeHandles, handle._observeHandleId))\n      throw new Error(\"Unknown observe handle ID \" + handle._observeHandleId);\n    delete self._observeHandles[handle._observeHandleId];\n\n    if (_.isEmpty(self._observeHandles) &&\n        self._addHandleTasksScheduledButNotPerformed === 0) {\n      // The last observe handle was stopped; call our stop callbacks, which:\n      //  - removes us from the MongoConnection's _liveResultsSets map\n      //  - stops the poll timer\n      //  - removes us from the invalidation crossbar\n      _.each(self._stopCallbacks, function (c) { c(); });\n      // This will cause future _addObserveHandleAndSendInitialAdds calls to\n      // throw.\n      self._observeHandles = null;\n    }\n  }\n});\n\n// observeChanges for tailable cursors on capped collections.\n//\n// Some differences from normal cursors:\n//   - Will never produce anything other than 'added' or 'addedBefore'. If you\n//     do update a document that has already been produced, this will not notice\n//     it.\n//   - If you disconnect and reconnect from Mongo, it will essentially restart\n//     the query, which will lead to duplicate results. This is pretty bad,\n//     but if you include a field called 'ts' which is inserted as\n//     new MongoInternals.MongoTimestamp(0, 0) (which is initialized to the\n//     current Mongo-style timestamp), we'll be able to find the place to\n//     restart properly. (This field is specifically understood by Mongo with an\n//     optimization which allows it to find the right place to start without\n//     an index on ts. It's how the oplog works.)\n//   - No callbacks are triggered synchronously with the call (there's no\n//     differentiation between \"initial data\" and \"later changes\"; everything\n//     that matches the query gets sent asynchronously).\n//   - De-duplication is not implemented.\n//   - Does not yet interact with the write fence. Probably, this should work by\n//     ignoring removes (which don't work on capped collections) and updates\n//     (which don't affect tailable cursors), and just keeping track of the ID\n//     of the inserted object, and closing the write fence once you get to that\n//     ID (or timestamp?).  This doesn't work well if the document doesn't match\n//     the query, though.  On the other hand, the write fence can close\n//     immediately if it does not match the query. So if we trust minimongo\n//     enough to accurately evaluate the query against the write fence, we\n//     should be able to do this...  Of course, minimongo doesn't even support\n//     Mongo Timestamps yet.\nMongoConnection.prototype._observeChangesTailable = function (\n    cursorDescription, ordered, callbacks) {\n  var self = this;\n\n  // Tailable cursors only ever call added/addedBefore callbacks, so it's an\n  // error if you didn't provide them.\n  if ((ordered && !callbacks.addedBefore) ||\n      (!ordered && !callbacks.added)) {\n    throw new Error(\"Can't observe an \" + (ordered ? \"ordered\" : \"unordered\")\n                    + \" tailable cursor without a \"\n                    + (ordered ? \"addedBefore\" : \"added\") + \" callback\");\n  }\n  var cursor = self._createSynchronousCursor(cursorDescription,\n                                            false /* useTransform */);\n\n  var stopped = false;\n  var lastTS = undefined;\n  Meteor.defer(function () {\n    while (true) {\n      if (stopped)\n        return;\n      try {\n        var doc = cursor._nextObject();\n      } catch (err) {\n        // There's no good way to figure out if this was actually an error from\n        // Mongo. Ah well. But either way, we need to retry the cursor (unless\n        // the failure was because the observe got stopped).\n        doc = null;\n      }\n      if (stopped)\n        return;\n      if (doc) {\n        var id = doc._id;\n        delete doc._id;\n        // If a tailable cursor contains a \"ts\" field, use it to recreate the\n        // cursor on error, and don't publish the field. (\"ts\" is a standard\n        // that Mongo uses internally for the oplog, and there's a special flag\n        // that lets you do binary search on it instead of needing to use an\n        // index.)\n        lastTS = doc.ts;\n        delete doc.ts;\n        if (ordered) {\n          callbacks.addedBefore(id, doc, null);\n        } else {\n          callbacks.added(id, doc);\n        }\n      } else {\n        var newSelector = _.clone(cursorDescription.selector);\n        if (lastTS) {\n          newSelector.ts = {$gt: lastTS};\n        }\n        // XXX maybe set replay flag\n        cursor = self._createSynchronousCursor(new CursorDescription(\n          cursorDescription.collectionName,\n          newSelector,\n          cursorDescription.options), false /* useTransform */);\n      }\n    }\n  });\n\n  return {\n    stop: function () {\n      stopped = true;\n      cursor.close();\n    }\n  };\n};\n\n// XXX We probably need to find a better way to expose this. Right now\n// it's only used by tests, but in fact you need it in normal\n// operation to interact with capped collections (eg, Galaxy uses it).\nMongoInternals.MongoTimestamp = MongoDB.Timestamp;\n\nMongoInternals.Connection = MongoConnection;\n","LocalCollectionDriver = function () {\n  var self = this;\n  self.noConnCollections = {};\n};\n\nvar ensureCollection = function (name, collections) {\n  if (!(name in collections))\n    collections[name] = new LocalCollection(name);\n  return collections[name];\n};\n\n_.extend(LocalCollectionDriver.prototype, {\n  open: function (name, conn) {\n    var self = this;\n    if (!name)\n      return new LocalCollection;\n    if (! conn) {\n      return ensureCollection(name, self.noConnCollections);\n    }\n    if (! conn._mongo_livedata_collections)\n      conn._mongo_livedata_collections = {};\n    // XXX is there a way to keep track of a connection's collections without\n    // dangling it off the connection object?\n    return ensureCollection(name, conn._mongo_livedata_collections);\n  }\n});\n\n// singleton\nLocalCollectionDriver = new LocalCollectionDriver;\n","MongoInternals.RemoteCollectionDriver = function (mongo_url) {\n  var self = this;\n  self.mongo = new MongoConnection(mongo_url);\n};\n\n_.extend(MongoInternals.RemoteCollectionDriver.prototype, {\n  open: function (name) {\n    var self = this;\n    var ret = {};\n    _.each(\n      ['find', 'findOne', 'insert', 'update', 'remove', '_ensureIndex',\n       '_dropIndex', '_createCappedCollection'],\n      function (m) {\n        ret[m] = _.bind(self.mongo[m], self.mongo, name);\n      });\n    return ret;\n  }\n});\n\n\n// Create the singleton RemoteCollectionDriver only on demand, so we\n// only require Mongo configuration if it's actually used (eg, not if\n// you're only trying to receive data from a remote DDP server.)\nMongoInternals.defaultRemoteCollectionDriver = _.once(function () {\n  // XXX kind of hacky\n  var mongoUrl = (\n    typeof __meteor_bootstrap__ !== 'undefined' &&\n      Meteor._get(__meteor_bootstrap__,\n                  'deployConfig', 'packages', 'mongo-livedata', 'url'));\n  // XXX bad error since it could also be set directly in METEOR_DEPLOY_CONFIG\n  if (! mongoUrl)\n    throw new Error(\"MONGO_URL must be set in environment\");\n\n  return new MongoInternals.RemoteCollectionDriver(mongoUrl);\n});\n","// options.connection, if given, is a LivedataClient or LivedataServer\n// XXX presently there is no way to destroy/clean up a Collection\n\nMeteor.Collection = function (name, options) {\n  var self = this;\n  if (! (self instanceof Meteor.Collection))\n    throw new Error('use \"new\" to construct a Meteor.Collection');\n  if (options && options.methods) {\n    // Backwards compatibility hack with original signature (which passed\n    // \"connection\" directly instead of in options. (Connections must have a \"methods\"\n    // method.)\n    // XXX remove before 1.0\n    options = {connection: options};\n  }\n  // Backwards compatibility: \"connection\" used to be called \"manager\".\n  if (options && options.manager && !options.connection) {\n    options.connection = options.manager;\n  }\n  options = _.extend({\n    connection: undefined,\n    idGeneration: 'STRING',\n    transform: null,\n    _driver: undefined,\n    _preventAutopublish: false\n  }, options);\n\n  switch (options.idGeneration) {\n  case 'MONGO':\n    self._makeNewID = function () {\n      return new Meteor.Collection.ObjectID();\n    };\n    break;\n  case 'STRING':\n  default:\n    self._makeNewID = function () {\n      return Random.id();\n    };\n    break;\n  }\n\n  if (options.transform)\n    self._transform = Deps._makeNonreactive(options.transform);\n  else\n    self._transform = null;\n\n  if (!name && (name !== null)) {\n    Meteor._debug(\"Warning: creating anonymous collection. It will not be \" +\n                  \"saved or synchronized over the network. (Pass null for \" +\n                  \"the collection name to turn off this warning.)\");\n  }\n\n  if (! name || options.connection === null)\n    // note: nameless collections never have a connection\n    self._connection = null;\n  else if (options.connection)\n    self._connection = options.connection;\n  else if (Meteor.isClient)\n    self._connection = Meteor.connection;\n  else\n    self._connection = Meteor.server;\n\n  if (!options._driver) {\n    if (name && self._connection === Meteor.server &&\n        typeof MongoInternals !== \"undefined\" &&\n        MongoInternals.defaultRemoteCollectionDriver) {\n      options._driver = MongoInternals.defaultRemoteCollectionDriver();\n    } else {\n      options._driver = LocalCollectionDriver;\n    }\n  }\n\n  self._collection = options._driver.open(name, self._connection);\n  self._name = name;\n\n  if (self._connection && self._connection.registerStore) {\n    // OK, we're going to be a slave, replicating some remote\n    // database, except possibly with some temporary divergence while\n    // we have unacknowledged RPC's.\n    var ok = self._connection.registerStore(name, {\n      // Called at the beginning of a batch of updates. batchSize is the number\n      // of update calls to expect.\n      //\n      // XXX This interface is pretty janky. reset probably ought to go back to\n      // being its own function, and callers shouldn't have to calculate\n      // batchSize. The optimization of not calling pause/remove should be\n      // delayed until later: the first call to update() should buffer its\n      // message, and then we can either directly apply it at endUpdate time if\n      // it was the only update, or do pauseObservers/apply/apply at the next\n      // update() if there's another one.\n      beginUpdate: function (batchSize, reset) {\n        // pause observers so users don't see flicker when updating several\n        // objects at once (including the post-reconnect reset-and-reapply\n        // stage), and so that a re-sorting of a query can take advantage of the\n        // full _diffQuery moved calculation instead of applying change one at a\n        // time.\n        if (batchSize > 1 || reset)\n          self._collection.pauseObservers();\n\n        if (reset)\n          self._collection.remove({});\n      },\n\n      // Apply an update.\n      // XXX better specify this interface (not in terms of a wire message)?\n      update: function (msg) {\n        var mongoId = LocalCollection._idParse(msg.id);\n        var doc = self._collection.findOne(mongoId);\n\n        // Is this a \"replace the whole doc\" message coming from the quiescence\n        // of method writes to an object? (Note that 'undefined' is a valid\n        // value meaning \"remove it\".)\n        if (msg.msg === 'replace') {\n          var replace = msg.replace;\n          if (!replace) {\n            if (doc)\n              self._collection.remove(mongoId);\n          } else if (!doc) {\n            self._collection.insert(replace);\n          } else {\n            // XXX check that replace has no $ ops\n            self._collection.update(mongoId, replace);\n          }\n          return;\n        } else if (msg.msg === 'added') {\n          if (doc) {\n            throw new Error(\"Expected not to find a document already present for an add\");\n          }\n          self._collection.insert(_.extend({_id: mongoId}, msg.fields));\n        } else if (msg.msg === 'removed') {\n          if (!doc)\n            throw new Error(\"Expected to find a document already present for removed\");\n          self._collection.remove(mongoId);\n        } else if (msg.msg === 'changed') {\n          if (!doc)\n            throw new Error(\"Expected to find a document to change\");\n          if (!_.isEmpty(msg.fields)) {\n            var modifier = {};\n            _.each(msg.fields, function (value, key) {\n              if (value === undefined) {\n                if (!modifier.$unset)\n                  modifier.$unset = {};\n                modifier.$unset[key] = 1;\n              } else {\n                if (!modifier.$set)\n                  modifier.$set = {};\n                modifier.$set[key] = value;\n              }\n            });\n            self._collection.update(mongoId, modifier);\n          }\n        } else {\n          throw new Error(\"I don't know how to deal with this message\");\n        }\n\n      },\n\n      // Called at the end of a batch of updates.\n      endUpdate: function () {\n        self._collection.resumeObservers();\n      },\n\n      // Called around method stub invocations to capture the original versions\n      // of modified documents.\n      saveOriginals: function () {\n        self._collection.saveOriginals();\n      },\n      retrieveOriginals: function () {\n        return self._collection.retrieveOriginals();\n      }\n    });\n\n    if (!ok)\n      throw new Error(\"There is already a collection named '\" + name + \"'\");\n  }\n\n  self._defineMutationMethods();\n\n  // autopublish\n  if (Package.autopublish && !options._preventAutopublish && self._connection\n      && self._connection.publish) {\n    self._connection.publish(null, function () {\n      return self.find();\n    }, {is_auto: true});\n  }\n};\n\n///\n/// Main collection API\n///\n\n\n_.extend(Meteor.Collection.prototype, {\n\n  _getFindSelector: function (args) {\n    if (args.length == 0)\n      return {};\n    else\n      return args[0];\n  },\n\n  _getFindOptions: function (args) {\n    var self = this;\n    if (args.length < 2) {\n      return { transform: self._transform };\n    } else {\n      return _.extend({\n        transform: self._transform\n      }, args[1]);\n    }\n  },\n\n  find: function (/* selector, options */) {\n    // Collection.find() (return all docs) behaves differently\n    // from Collection.find(undefined) (return 0 docs).  so be\n    // careful about the length of arguments.\n    var self = this;\n    var argArray = _.toArray(arguments);\n    return self._collection.find(self._getFindSelector(argArray),\n                                 self._getFindOptions(argArray));\n  },\n\n  findOne: function (/* selector, options */) {\n    var self = this;\n    var argArray = _.toArray(arguments);\n    return self._collection.findOne(self._getFindSelector(argArray),\n                                    self._getFindOptions(argArray));\n  }\n\n});\n\nMeteor.Collection._publishCursor = function (cursor, sub, collection) {\n  var observeHandle = cursor.observeChanges({\n    added: function (id, fields) {\n      sub.added(collection, id, fields);\n    },\n    changed: function (id, fields) {\n      sub.changed(collection, id, fields);\n    },\n    removed: function (id) {\n      sub.removed(collection, id);\n    }\n  });\n\n  // We don't call sub.ready() here: it gets called in livedata_server, after\n  // possibly calling _publishCursor on multiple returned cursors.\n\n  // register stop callback (expects lambda w/ no args).\n  sub.onStop(function () {observeHandle.stop();});\n};\n\n// protect against dangerous selectors.  falsey and {_id: falsey} are both\n// likely programmer error, and not what you want, particularly for destructive\n// operations.  JS regexps don't serialize over DDP but can be trivially\n// replaced by $regex.\nMeteor.Collection._rewriteSelector = function (selector) {\n  // shorthand -- scalars match _id\n  if (LocalCollection._selectorIsId(selector))\n    selector = {_id: selector};\n\n  if (!selector || (('_id' in selector) && !selector._id))\n    // can't match anything\n    return {_id: Random.id()};\n\n  var ret = {};\n  _.each(selector, function (value, key) {\n    // Mongo supports both {field: /foo/} and {field: {$regex: /foo/}}\n    if (value instanceof RegExp) {\n      ret[key] = convertRegexpToMongoSelector(value);\n    } else if (value && value.$regex instanceof RegExp) {\n      ret[key] = convertRegexpToMongoSelector(value.$regex);\n      // if value is {$regex: /foo/, $options: ...} then $options\n      // override the ones set on $regex.\n      if (value.$options !== undefined)\n        ret[key].$options = value.$options;\n    }\n    else if (_.contains(['$or','$and','$nor'], key)) {\n      // Translate lower levels of $and/$or/$nor\n      ret[key] = _.map(value, function (v) {\n        return Meteor.Collection._rewriteSelector(v);\n      });\n    }\n    else {\n      ret[key] = value;\n    }\n  });\n  return ret;\n};\n\n// convert a JS RegExp object to a Mongo {$regex: ..., $options: ...}\n// selector\nvar convertRegexpToMongoSelector = function (regexp) {\n  check(regexp, RegExp); // safety belt\n\n  var selector = {$regex: regexp.source};\n  var regexOptions = '';\n  // JS RegExp objects support 'i', 'm', and 'g'. Mongo regex $options\n  // support 'i', 'm', 'x', and 's'. So we support 'i' and 'm' here.\n  if (regexp.ignoreCase)\n    regexOptions += 'i';\n  if (regexp.multiline)\n    regexOptions += 'm';\n  if (regexOptions)\n    selector.$options = regexOptions;\n\n  return selector;\n};\n\nvar throwIfSelectorIsNotId = function (selector, methodName) {\n  if (!LocalCollection._selectorIsIdPerhapsAsObject(selector)) {\n    throw new Meteor.Error(\n      403, \"Not permitted. Untrusted code may only \" + methodName +\n        \" documents by ID.\");\n  }\n};\n\n// 'insert' immediately returns the inserted document's new _id.  The\n// others return nothing.\n//\n// Otherwise, the semantics are exactly like other methods: they take\n// a callback as an optional last argument; if no callback is\n// provided, they block until the operation is complete, and throw an\n// exception if it fails; if a callback is provided, then they don't\n// necessarily block, and they call the callback when they finish with\n// error and result arguments.  (The insert method provides the\n// document ID as its result; update and remove don't provide a result.)\n//\n// On the client, blocking is impossible, so if a callback\n// isn't provided, they just return immediately and any error\n// information is lost.\n//\n// There's one more tweak. On the client, if you don't provide a\n// callback, then if there is an error, a message will be logged with\n// Meteor._debug.\n//\n// The intent (though this is actually determined by the underlying\n// drivers) is that the operations should be done synchronously, not\n// generating their result until the database has acknowledged\n// them. In the future maybe we should provide a flag to turn this\n// off.\n_.each([\"insert\", \"update\", \"remove\"], function (name) {\n  Meteor.Collection.prototype[name] = function (/* arguments */) {\n    var self = this;\n    var args = _.toArray(arguments);\n    var callback;\n    var ret;\n\n    if (args.length && args[args.length - 1] instanceof Function)\n      callback = args.pop();\n\n    if (Meteor.isClient && !callback) {\n      // Client can't block, so it can't report errors by exception,\n      // only by callback. If they forget the callback, give them a\n      // default one that logs the error, so they aren't totally\n      // baffled if their writes don't work because their database is\n      // down.\n      callback = function (err) {\n        if (err)\n          Meteor._debug(name + \" failed: \" + (err.reason || err.stack));\n      };\n    }\n\n    if (name === \"insert\") {\n      if (!args.length)\n        throw new Error(\"insert requires an argument\");\n      // shallow-copy the document and generate an ID\n      args[0] = _.extend({}, args[0]);\n      if ('_id' in args[0]) {\n        ret = args[0]._id;\n        if (!(typeof ret === 'string'\n              || ret instanceof Meteor.Collection.ObjectID))\n          throw new Error(\"Meteor requires document _id fields to be strings or ObjectIDs\");\n      } else {\n        ret = args[0]._id = self._makeNewID();\n      }\n    } else {\n      args[0] = Meteor.Collection._rewriteSelector(args[0]);\n    }\n\n    var wrappedCallback;\n    if (callback) {\n      wrappedCallback = function (error, result) {\n        callback(error, !error && ret);\n      };\n    }\n\n    if (self._connection && self._connection !== Meteor.server) {\n      // just remote to another endpoint, propagate return value or\n      // exception.\n\n      var enclosing = DDP._CurrentInvocation.get();\n      var alreadyInSimulation = enclosing && enclosing.isSimulation;\n      if (!alreadyInSimulation && name !== \"insert\") {\n        // If we're about to actually send an RPC, we should throw an error if\n        // this is a non-ID selector, because the mutation methods only allow\n        // single-ID selectors. (If we don't throw here, we'll see flicker.)\n        throwIfSelectorIsNotId(args[0], name);\n      }\n\n      self._connection.apply(self._prefix + name, args, wrappedCallback);\n\n    } else {\n      // it's my collection.  descend into the collection object\n      // and propagate any exception.\n      args.push(wrappedCallback);\n      try {\n        self._collection[name].apply(self._collection, args);\n      } catch (e) {\n        if (callback) {\n          callback(e);\n          return null;\n        }\n        throw e;\n      }\n    }\n\n    // both sync and async, unless we threw an exception, return ret\n    // (new document ID for insert, undefined otherwise).\n    return ret;\n  };\n});\n\n// We'll actually design an index API later. For now, we just pass through to\n// Mongo's, but make it synchronous.\nMeteor.Collection.prototype._ensureIndex = function (index, options) {\n  var self = this;\n  if (!self._collection._ensureIndex)\n    throw new Error(\"Can only call _ensureIndex on server collections\");\n  self._collection._ensureIndex(index, options);\n};\nMeteor.Collection.prototype._dropIndex = function (index) {\n  var self = this;\n  if (!self._collection._dropIndex)\n    throw new Error(\"Can only call _dropIndex on server collections\");\n  self._collection._dropIndex(index);\n};\nMeteor.Collection.prototype._createCappedCollection = function (byteSize) {\n  var self = this;\n  if (!self._collection._createCappedCollection)\n    throw new Error(\"Can only call _createCappedCollection on server collections\");\n  self._collection._createCappedCollection(byteSize);\n};\n\nMeteor.Collection.ObjectID = LocalCollection._ObjectID;\n\n///\n/// Remote methods and access control.\n///\n\n// Restrict default mutators on collection. allow() and deny() take the\n// same options:\n//\n// options.insert {Function(userId, doc)}\n//   return true to allow/deny adding this document\n//\n// options.update {Function(userId, docs, fields, modifier)}\n//   return true to allow/deny updating these documents.\n//   `fields` is passed as an array of fields that are to be modified\n//\n// options.remove {Function(userId, docs)}\n//   return true to allow/deny removing these documents\n//\n// options.fetch {Array}\n//   Fields to fetch for these validators. If any call to allow or deny\n//   does not have this option then all fields are loaded.\n//\n// allow and deny can be called multiple times. The validators are\n// evaluated as follows:\n// - If neither deny() nor allow() has been called on the collection,\n//   then the request is allowed if and only if the \"insecure\" smart\n//   package is in use.\n// - Otherwise, if any deny() function returns true, the request is denied.\n// - Otherwise, if any allow() function returns true, the request is allowed.\n// - Otherwise, the request is denied.\n//\n// Meteor may call your deny() and allow() functions in any order, and may not\n// call all of them if it is able to make a decision without calling them all\n// (so don't include side effects).\n\n(function () {\n  var addValidator = function(allowOrDeny, options) {\n    // validate keys\n    var VALID_KEYS = ['insert', 'update', 'remove', 'fetch', 'transform'];\n    _.each(_.keys(options), function (key) {\n      if (!_.contains(VALID_KEYS, key))\n        throw new Error(allowOrDeny + \": Invalid key: \" + key);\n    });\n\n    var self = this;\n    self._restricted = true;\n\n    _.each(['insert', 'update', 'remove'], function (name) {\n      if (options[name]) {\n        if (!(options[name] instanceof Function)) {\n          throw new Error(allowOrDeny + \": Value for `\" + name + \"` must be a function\");\n        }\n        if (self._transform)\n          options[name].transform = self._transform;\n        if (options.transform)\n          options[name].transform = Deps._makeNonreactive(options.transform);\n        self._validators[name][allowOrDeny].push(options[name]);\n      }\n    });\n\n    // Only update the fetch fields if we're passed things that affect\n    // fetching. This way allow({}) and allow({insert: f}) don't result in\n    // setting fetchAllFields\n    if (options.update || options.remove || options.fetch) {\n      if (options.fetch && !(options.fetch instanceof Array)) {\n        throw new Error(allowOrDeny + \": Value for `fetch` must be an array\");\n      }\n      self._updateFetch(options.fetch);\n    }\n  };\n\n  Meteor.Collection.prototype.allow = function(options) {\n    addValidator.call(this, 'allow', options);\n  };\n  Meteor.Collection.prototype.deny = function(options) {\n    addValidator.call(this, 'deny', options);\n  };\n})();\n\n\nMeteor.Collection.prototype._defineMutationMethods = function() {\n  var self = this;\n\n  // set to true once we call any allow or deny methods. If true, use\n  // allow/deny semantics. If false, use insecure mode semantics.\n  self._restricted = false;\n\n  // Insecure mode (default to allowing writes). Defaults to 'undefined' which\n  // means insecure iff the insecure package is loaded. This property can be\n  // overriden by tests or packages wishing to change insecure mode behavior of\n  // their collections.\n  self._insecure = undefined;\n\n  self._validators = {\n    insert: {allow: [], deny: []},\n    update: {allow: [], deny: []},\n    remove: {allow: [], deny: []},\n    fetch: [],\n    fetchAllFields: false\n  };\n\n  if (!self._name)\n    return; // anonymous collection\n\n  // XXX Think about method namespacing. Maybe methods should be\n  // \"Meteor:Mongo:insert/NAME\"?\n  self._prefix = '/' + self._name + '/';\n\n  // mutation methods\n  if (self._connection) {\n    var m = {};\n\n    _.each(['insert', 'update', 'remove'], function (method) {\n      m[self._prefix + method] = function (/* ... */) {\n        // All the methods do their own validation, instead of using check().\n        check(arguments, [Match.Any]);\n        try {\n          if (this.isSimulation) {\n\n            // In a client simulation, you can do any mutation (even with a\n            // complex selector).\n            self._collection[method].apply(\n              self._collection, _.toArray(arguments));\n            return;\n          }\n\n          // This is the server receiving a method call from the client. We\n          // don't allow arbitrary selectors in mutations from the client: only\n          // single-ID selectors.\n          if (method !== 'insert')\n            throwIfSelectorIsNotId(arguments[0], method);\n\n          if (self._restricted) {\n            // short circuit if there is no way it will pass.\n            if (self._validators[method].allow.length === 0) {\n              throw new Meteor.Error(\n                403, \"Access denied. No allow validators set on restricted \" +\n                  \"collection for method '\" + method + \"'.\");\n            }\n\n            var validatedMethodName =\n                  '_validated' + method.charAt(0).toUpperCase() + method.slice(1);\n            var argsWithUserId = [this.userId].concat(_.toArray(arguments));\n            self[validatedMethodName].apply(self, argsWithUserId);\n          } else if (self._isInsecure()) {\n            // In insecure mode, allow any mutation (with a simple selector).\n            self._collection[method].apply(self._collection,\n                                           _.toArray(arguments));\n          } else {\n            // In secure mode, if we haven't called allow or deny, then nothing\n            // is permitted.\n            throw new Meteor.Error(403, \"Access denied\");\n          }\n        } catch (e) {\n          if (e.name === 'MongoError' || e.name === 'MinimongoError') {\n            throw new Meteor.Error(409, e.toString());\n          } else {\n            throw e;\n          }\n        }\n      };\n    });\n    // Minimongo on the server gets no stubs; instead, by default\n    // it wait()s until its result is ready, yielding.\n    // This matches the behavior of macromongo on the server better.\n    if (Meteor.isClient || self._connection === Meteor.server)\n      self._connection.methods(m);\n  }\n};\n\n\nMeteor.Collection.prototype._updateFetch = function (fields) {\n  var self = this;\n\n  if (!self._validators.fetchAllFields) {\n    if (fields) {\n      self._validators.fetch = _.union(self._validators.fetch, fields);\n    } else {\n      self._validators.fetchAllFields = true;\n      // clear fetch just to make sure we don't accidentally read it\n      self._validators.fetch = null;\n    }\n  }\n};\n\nMeteor.Collection.prototype._isInsecure = function () {\n  var self = this;\n  if (self._insecure === undefined)\n    return !!Package.insecure;\n  return self._insecure;\n};\n\nvar docToValidate = function (validator, doc) {\n  var ret = doc;\n  if (validator.transform)\n    ret = validator.transform(EJSON.clone(doc));\n  return ret;\n};\n\nMeteor.Collection.prototype._validatedInsert = function(userId, doc) {\n  var self = this;\n\n  // call user validators.\n  // Any deny returns true means denied.\n  if (_.any(self._validators.insert.deny, function(validator) {\n    return validator(userId, docToValidate(validator, doc));\n  })) {\n    throw new Meteor.Error(403, \"Access denied\");\n  }\n  // Any allow returns true means proceed. Throw error if they all fail.\n  if (_.all(self._validators.insert.allow, function(validator) {\n    return !validator(userId, docToValidate(validator, doc));\n  })) {\n    throw new Meteor.Error(403, \"Access denied\");\n  }\n\n  self._collection.insert.call(self._collection, doc);\n};\n\nvar transformDoc = function (validator, doc) {\n  if (validator.transform)\n    return validator.transform(doc);\n  return doc;\n};\n\n// Simulate a mongo `update` operation while validating that the access\n// control rules set by calls to `allow/deny` are satisfied. If all\n// pass, rewrite the mongo operation to use $in to set the list of\n// document ids to change ##ValidatedChange\nMeteor.Collection.prototype._validatedUpdate = function(\n    userId, selector, mutator, options) {\n  var self = this;\n\n  if (!LocalCollection._selectorIsIdPerhapsAsObject(selector))\n    throw new Error(\"validated update should be of a single ID\");\n\n  // compute modified fields\n  var fields = [];\n  _.each(mutator, function (params, op) {\n    if (op.charAt(0) !== '$') {\n      throw new Meteor.Error(\n        403, \"Access denied. In a restricted collection you can only update documents, not replace them. Use a Mongo update operator, such as '$set'.\");\n    } else if (!_.has(ALLOWED_UPDATE_OPERATIONS, op)) {\n      throw new Meteor.Error(\n        403, \"Access denied. Operator \" + op + \" not allowed in a restricted collection.\");\n    } else {\n      _.each(_.keys(params), function (field) {\n        // treat dotted fields as if they are replacing their\n        // top-level part\n        if (field.indexOf('.') !== -1)\n          field = field.substring(0, field.indexOf('.'));\n\n        // record the field we are trying to change\n        if (!_.contains(fields, field))\n          fields.push(field);\n      });\n    }\n  });\n\n  var findOptions = {transform: null};\n  if (!self._validators.fetchAllFields) {\n    findOptions.fields = {};\n    _.each(self._validators.fetch, function(fieldName) {\n      findOptions.fields[fieldName] = 1;\n    });\n  }\n\n  var doc = self._collection.findOne(selector, findOptions);\n  if (!doc)  // none satisfied!\n    return;\n\n  var factoriedDoc;\n\n  // call user validators.\n  // Any deny returns true means denied.\n  if (_.any(self._validators.update.deny, function(validator) {\n    if (!factoriedDoc)\n      factoriedDoc = transformDoc(validator, doc);\n    return validator(userId,\n                     factoriedDoc,\n                     fields,\n                     mutator);\n  })) {\n    throw new Meteor.Error(403, \"Access denied\");\n  }\n  // Any allow returns true means proceed. Throw error if they all fail.\n  if (_.all(self._validators.update.allow, function(validator) {\n    if (!factoriedDoc)\n      factoriedDoc = transformDoc(validator, doc);\n    return !validator(userId,\n                      factoriedDoc,\n                      fields,\n                      mutator);\n  })) {\n    throw new Meteor.Error(403, \"Access denied\");\n  }\n\n  // Back when we supported arbitrary client-provided selectors, we actually\n  // rewrote the selector to include an _id clause before passing to Mongo to\n  // avoid races, but since selector is guaranteed to already just be an ID, we\n  // don't have to any more.\n\n  self._collection.update.call(\n    self._collection, selector, mutator, options);\n};\n\n// Only allow these operations in validated updates. Specifically\n// whitelist operations, rather than blacklist, so new complex\n// operations that are added aren't automatically allowed. A complex\n// operation is one that does more than just modify its target\n// field. For now this contains all update operations except '$rename'.\n// http://docs.mongodb.org/manual/reference/operators/#update\nvar ALLOWED_UPDATE_OPERATIONS = {\n  $inc:1, $set:1, $unset:1, $addToSet:1, $pop:1, $pullAll:1, $pull:1,\n  $pushAll:1, $push:1, $bit:1\n};\n\n// Simulate a mongo `remove` operation while validating access control\n// rules. See #ValidatedChange\nMeteor.Collection.prototype._validatedRemove = function(userId, selector) {\n  var self = this;\n\n  var findOptions = {transform: null};\n  if (!self._validators.fetchAllFields) {\n    findOptions.fields = {};\n    _.each(self._validators.fetch, function(fieldName) {\n      findOptions.fields[fieldName] = 1;\n    });\n  }\n\n  var doc = self._collection.findOne(selector, findOptions);\n  if (!doc)\n    return;\n\n  // call user validators.\n  // Any deny returns true means denied.\n  if (_.any(self._validators.remove.deny, function(validator) {\n    return validator(userId, transformDoc(validator, doc));\n  })) {\n    throw new Meteor.Error(403, \"Access denied\");\n  }\n  // Any allow returns true means proceed. Throw error if they all fail.\n  if (_.all(self._validators.remove.allow, function(validator) {\n    return !validator(userId, transformDoc(validator, doc));\n  })) {\n    throw new Meteor.Error(403, \"Access denied\");\n  }\n\n  // Back when we supported arbitrary client-provided selectors, we actually\n  // rewrote the selector to {_id: {$in: [ids that we found]}} before passing to\n  // Mongo to avoid races, but since selector is guaranteed to already just be\n  // an ID, we don't have to any more.\n\n  self._collection.remove.call(self._collection, selector);\n};\n"]}